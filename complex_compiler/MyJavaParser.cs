//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MyJava.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class MyJavaParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, BOOLEAN=15, CHAR=16, 
		CLASS=17, FOR=18, NEW=19, PRIVATE=20, PUBLIC=21, STATIC=22, VOID=23, BooleanLiteral=24, 
		CharacterLiteral=25, NullLiteral=26, LPAREN=27, RPAREN=28, LBRACE=29, 
		RBRACE=30, LBRACK=31, RBRACK=32, SEMI=33, COMMA=34, DOT=35, ASSIGN=36, 
		GT=37, LT=38, BANG=39, TILDE=40, QUESTION=41, COLON=42, EQUAL=43, LE=44, 
		GE=45, NOTEQUAL=46, AND=47, OR=48, INC=49, DEC=50, ADD=51, SUB=52, MUL=53, 
		DIV=54, BITAND=55, BITOR=56, CARET=57, MOD=58, Identifier=59, WS=60, COMMENT=61, 
		LINE_COMMENT=62;
	public const int
		RULE_compilationUnit = 0, RULE_typeDeclaration = 1, RULE_classOrInterfaceModifier = 2, 
		RULE_classDeclaration = 3, RULE_classBody = 4, RULE_classBodyDeclaration = 5, 
		RULE_memberDeclaration = 6, RULE_methodDeclaration = 7, RULE_fieldDeclaration = 8, 
		RULE_variableDeclarator = 9, RULE_variableInitializer = 10, RULE_arrayInitializer = 11, 
		RULE_variableDeclaratorId = 12, RULE_type = 13, RULE_classOrInterfaceType = 14, 
		RULE_primitiveType = 15, RULE_qualifiedNameList = 16, RULE_formalParameters = 17, 
		RULE_formalParameterList = 18, RULE_formalParameter = 19, RULE_lastFormalParameter = 20, 
		RULE_methodBody = 21, RULE_qualifiedName = 22, RULE_literal = 23, RULE_block = 24, 
		RULE_blockStatement = 25, RULE_localVariableDeclaration = 26, RULE_statement = 27, 
		RULE_enhancedForControl = 28, RULE_expressionList = 29, RULE_expression = 30, 
		RULE_primary = 31, RULE_creator = 32, RULE_createdName = 33, RULE_classCreatorRest = 34, 
		RULE_arguments = 35;
	public static readonly string[] ruleNames = {
		"compilationUnit", "typeDeclaration", "classOrInterfaceModifier", "classDeclaration", 
		"classBody", "classBodyDeclaration", "memberDeclaration", "methodDeclaration", 
		"fieldDeclaration", "variableDeclarator", "variableInitializer", "arrayInitializer", 
		"variableDeclaratorId", "type", "classOrInterfaceType", "primitiveType", 
		"qualifiedNameList", "formalParameters", "formalParameterList", "formalParameter", 
		"lastFormalParameter", "methodBody", "qualifiedName", "literal", "block", 
		"blockStatement", "localVariableDeclaration", "statement", "enhancedForControl", 
		"expressionList", "expression", "primary", "creator", "createdName", "classCreatorRest", 
		"arguments"
	};

	private static readonly string[] _LiteralNames = {
		null, "'throws'", "'...'", "'this'", "'+='", "'-='", "'*='", "'/='", "'&='", 
		"'|='", "'^='", "'>>='", "'>>>='", "'<<='", "'%='", "'boolean'", "'char'", 
		"'class'", "'for'", "'new'", "'private'", "'public'", "'static'", "'void'", 
		null, null, "'null'", "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", 
		"','", "'.'", "'='", "'>'", "'<'", "'!'", "'~'", "'?'", "':'", "'=='", 
		"'<='", "'>='", "'!='", "'&&'", "'||'", "'++'", "'--'", "'+'", "'-'", 
		"'*'", "'/'", "'&'", "'|'", "'^'", "'%'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "BOOLEAN", "CHAR", "CLASS", "FOR", "NEW", "PRIVATE", 
		"PUBLIC", "STATIC", "VOID", "BooleanLiteral", "CharacterLiteral", "NullLiteral", 
		"LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", 
		"DOT", "ASSIGN", "GT", "LT", "BANG", "TILDE", "QUESTION", "COLON", "EQUAL", 
		"LE", "GE", "NOTEQUAL", "AND", "OR", "INC", "DEC", "ADD", "SUB", "MUL", 
		"DIV", "BITAND", "BITOR", "CARET", "MOD", "Identifier", "WS", "COMMENT", 
		"LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MyJava.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MyJavaParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(MyJavaParser.Eof, 0); }
		public TypeDeclarationContext[] typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << PRIVATE) | (1L << PUBLIC) | (1L << STATIC) | (1L << SEMI))) != 0)) {
				{
				{
				State = 72; typeDeclaration();
				}
				}
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 78; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public ClassOrInterfaceModifierContext[] classOrInterfaceModifier() {
			return GetRuleContexts<ClassOrInterfaceModifierContext>();
		}
		public ClassOrInterfaceModifierContext classOrInterfaceModifier(int i) {
			return GetRuleContext<ClassOrInterfaceModifierContext>(i);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_typeDeclaration);
		int _la;
		try {
			State = 88;
			switch (TokenStream.La(1)) {
			case CLASS:
			case PRIVATE:
			case PUBLIC:
			case STATIC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 83;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRIVATE) | (1L << PUBLIC) | (1L << STATIC))) != 0)) {
					{
					{
					State = 80; classOrInterfaceModifier();
					}
					}
					State = 85;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 86; classDeclaration();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 87; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrInterfaceModifierContext : ParserRuleContext {
		public ClassOrInterfaceModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrInterfaceModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterClassOrInterfaceModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitClassOrInterfaceModifier(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrInterfaceModifierContext classOrInterfaceModifier() {
		ClassOrInterfaceModifierContext _localctx = new ClassOrInterfaceModifierContext(Context, State);
		EnterRule(_localctx, 4, RULE_classOrInterfaceModifier);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 90;
					_la = TokenStream.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRIVATE) | (1L << PUBLIC) | (1L << STATIC))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 93;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(MyJavaParser.Identifier, 0); }
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_classDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95; Match(CLASS);
			State = 96; Match(Identifier);
			State = 97; classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public ClassBodyDeclarationContext[] classBodyDeclaration() {
			return GetRuleContexts<ClassBodyDeclarationContext>();
		}
		public ClassBodyDeclarationContext classBodyDeclaration(int i) {
			return GetRuleContext<ClassBodyDeclarationContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 8, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99; Match(LBRACE);
			State = 103;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHAR) | (1L << CLASS) | (1L << PRIVATE) | (1L << PUBLIC) | (1L << STATIC) | (1L << VOID) | (1L << SEMI) | (1L << Identifier))) != 0)) {
				{
				{
				State = 100; classBodyDeclaration();
				}
				}
				State = 105;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 106; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyDeclarationContext : ParserRuleContext {
		public MemberDeclarationContext memberDeclaration() {
			return GetRuleContext<MemberDeclarationContext>(0);
		}
		public ClassOrInterfaceModifierContext[] classOrInterfaceModifier() {
			return GetRuleContexts<ClassOrInterfaceModifierContext>();
		}
		public ClassOrInterfaceModifierContext classOrInterfaceModifier(int i) {
			return GetRuleContext<ClassOrInterfaceModifierContext>(i);
		}
		public ClassBodyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBodyDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterClassBodyDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitClassBodyDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyDeclarationContext classBodyDeclaration() {
		ClassBodyDeclarationContext _localctx = new ClassBodyDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_classBodyDeclaration);
		int _la;
		try {
			State = 116;
			switch (TokenStream.La(1)) {
			case SEMI:
				EnterOuterAlt(_localctx, 1);
				{
				State = 108; Match(SEMI);
				}
				break;
			case BOOLEAN:
			case CHAR:
			case CLASS:
			case PRIVATE:
			case PUBLIC:
			case STATIC:
			case VOID:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRIVATE) | (1L << PUBLIC) | (1L << STATIC))) != 0)) {
					{
					{
					State = 109; classOrInterfaceModifier();
					}
					}
					State = 114;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 115; memberDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclarationContext : ParserRuleContext {
		public MemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclaration; } }
	 
		public MemberDeclarationContext() { }
		public virtual void CopyFrom(MemberDeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ClassMemberDeclContext : MemberDeclarationContext {
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public ClassMemberDeclContext(MemberDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterClassMemberDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitClassMemberDecl(this);
		}
	}
	public partial class MethodMemberDeclContext : MemberDeclarationContext {
		public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public MethodMemberDeclContext(MemberDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterMethodMemberDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitMethodMemberDecl(this);
		}
	}
	public partial class FieldMemberDeclContext : MemberDeclarationContext {
		public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		public FieldMemberDeclContext(MemberDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterFieldMemberDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitFieldMemberDecl(this);
		}
	}

	[RuleVersion(0)]
	public MemberDeclarationContext memberDeclaration() {
		MemberDeclarationContext _localctx = new MemberDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_memberDeclaration);
		try {
			State = 121;
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				_localctx = new MethodMemberDeclContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 118; methodDeclaration();
				}
				break;
			case 2:
				_localctx = new FieldMemberDeclContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 119; fieldDeclaration();
				}
				break;
			case 3:
				_localctx = new ClassMemberDeclContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 120; classDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(MyJavaParser.Identifier, 0); }
		public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public QualifiedNameListContext qualifiedNameList() {
			return GetRuleContext<QualifiedNameListContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 125;
			switch (TokenStream.La(1)) {
			case BOOLEAN:
			case CHAR:
			case Identifier:
				{
				State = 123; type();
				}
				break;
			case VOID:
				{
				State = 124; Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 127; Match(Identifier);
			State = 128; formalParameters();
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==LBRACK) {
				{
				{
				State = 129; Match(LBRACK);
				State = 130; Match(RBRACK);
				}
				}
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 138;
			_la = TokenStream.La(1);
			if (_la==T__0) {
				{
				State = 136; Match(T__0);
				State = 137; qualifiedNameList();
				}
			}

			State = 142;
			switch (TokenStream.La(1)) {
			case LBRACE:
				{
				State = 140; methodBody();
				}
				break;
			case SEMI:
				{
				State = 141; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public VariableDeclaratorContext variableDeclarator() {
			return GetRuleContext<VariableDeclaratorContext>(0);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_fieldDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; type();
			State = 145; variableDeclarator();
			State = 146; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : ParserRuleContext {
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public VariableInitializerContext variableInitializer() {
			return GetRuleContext<VariableInitializerContext>(0);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(Context, State);
		EnterRule(_localctx, 18, RULE_variableDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 148; variableDeclaratorId();
			State = 151;
			_la = TokenStream.La(1);
			if (_la==ASSIGN) {
				{
				State = 149; Match(ASSIGN);
				State = 150; variableInitializer();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableInitializerContext : ParserRuleContext {
		public ArrayInitializerContext arrayInitializer() {
			return GetRuleContext<ArrayInitializerContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterVariableInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitVariableInitializer(this);
		}
	}

	[RuleVersion(0)]
	public VariableInitializerContext variableInitializer() {
		VariableInitializerContext _localctx = new VariableInitializerContext(Context, State);
		EnterRule(_localctx, 20, RULE_variableInitializer);
		try {
			State = 155;
			switch (TokenStream.La(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 153; arrayInitializer();
				}
				break;
			case T__2:
			case NEW:
			case BooleanLiteral:
			case CharacterLiteral:
			case NullLiteral:
			case LPAREN:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 154; expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArrayInitializerContext : ParserRuleContext {
		public VariableInitializerContext[] variableInitializer() {
			return GetRuleContexts<VariableInitializerContext>();
		}
		public VariableInitializerContext variableInitializer(int i) {
			return GetRuleContext<VariableInitializerContext>(i);
		}
		public ArrayInitializerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arrayInitializer; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterArrayInitializer(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitArrayInitializer(this);
		}
	}

	[RuleVersion(0)]
	public ArrayInitializerContext arrayInitializer() {
		ArrayInitializerContext _localctx = new ArrayInitializerContext(Context, State);
		EnterRule(_localctx, 22, RULE_arrayInitializer);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 157; Match(LBRACE);
			State = 169;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << NEW) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << LBRACE) | (1L << BANG) | (1L << TILDE) | (1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB) | (1L << Identifier))) != 0)) {
				{
				State = 158; variableInitializer();
				State = 163;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 159; Match(COMMA);
						State = 160; variableInitializer();
						}
						} 
					}
					State = 165;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,14,Context);
				}
				State = 167;
				_la = TokenStream.La(1);
				if (_la==COMMA) {
					{
					State = 166; Match(COMMA);
					}
				}

				}
			}

			State = 171; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorIdContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(MyJavaParser.Identifier, 0); }
		public VariableDeclaratorIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaratorId; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterVariableDeclaratorId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitVariableDeclaratorId(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorIdContext variableDeclaratorId() {
		VariableDeclaratorIdContext _localctx = new VariableDeclaratorIdContext(Context, State);
		EnterRule(_localctx, 24, RULE_variableDeclaratorId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173; Match(Identifier);
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==LBRACK) {
				{
				{
				State = 174; Match(LBRACK);
				State = 175; Match(RBRACK);
				}
				}
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 26, RULE_type);
		int _la;
		try {
			State = 197;
			switch (TokenStream.La(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 181; classOrInterfaceType();
				State = 186;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==LBRACK) {
					{
					{
					State = 182; Match(LBRACK);
					State = 183; Match(RBRACK);
					}
					}
					State = 188;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case BOOLEAN:
			case CHAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 189; primitiveType();
				State = 194;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==LBRACK) {
					{
					{
					State = 190; Match(LBRACK);
					State = 191; Match(RBRACK);
					}
					}
					State = 196;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrInterfaceTypeContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(MyJavaParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(MyJavaParser.Identifier, i);
		}
		public ClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitClassOrInterfaceType(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrInterfaceTypeContext classOrInterfaceType() {
		ClassOrInterfaceTypeContext _localctx = new ClassOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 28, RULE_classOrInterfaceType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 199; Match(Identifier);
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOT) {
				{
				{
				State = 200; Match(DOT);
				State = 201; Match(Identifier);
				}
				}
				State = 206;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 30, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 207;
			_la = TokenStream.La(1);
			if ( !(_la==BOOLEAN || _la==CHAR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameListContext : ParserRuleContext {
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public QualifiedNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedNameList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterQualifiedNameList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitQualifiedNameList(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameListContext qualifiedNameList() {
		QualifiedNameListContext _localctx = new QualifiedNameListContext(Context, State);
		EnterRule(_localctx, 32, RULE_qualifiedNameList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209; qualifiedName();
			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 210; Match(COMMA);
				State = 211; qualifiedName();
				}
				}
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParametersContext : ParserRuleContext {
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FormalParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterFormalParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitFormalParameters(this);
		}
	}

	[RuleVersion(0)]
	public FormalParametersContext formalParameters() {
		FormalParametersContext _localctx = new FormalParametersContext(Context, State);
		EnterRule(_localctx, 34, RULE_formalParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217; Match(LPAREN);
			State = 219;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHAR) | (1L << Identifier))) != 0)) {
				{
				State = 218; formalParameterList();
				}
			}

			State = 221; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		public FormalParameterContext[] formalParameter() {
			return GetRuleContexts<FormalParameterContext>();
		}
		public FormalParameterContext formalParameter(int i) {
			return GetRuleContext<FormalParameterContext>(i);
		}
		public LastFormalParameterContext lastFormalParameter() {
			return GetRuleContext<LastFormalParameterContext>(0);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 36, RULE_formalParameterList);
		int _la;
		try {
			int _alt;
			State = 236;
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 223; formalParameter();
				State = 228;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 224; Match(COMMA);
						State = 225; formalParameter();
						}
						} 
					}
					State = 230;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
				}
				State = 233;
				_la = TokenStream.La(1);
				if (_la==COMMA) {
					{
					State = 231; Match(COMMA);
					State = 232; lastFormalParameter();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 235; lastFormalParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public FormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitFormalParameter(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterContext formalParameter() {
		FormalParameterContext _localctx = new FormalParameterContext(Context, State);
		EnterRule(_localctx, 38, RULE_formalParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 238; type();
			State = 239; variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastFormalParameterContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public LastFormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastFormalParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterLastFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitLastFormalParameter(this);
		}
	}

	[RuleVersion(0)]
	public LastFormalParameterContext lastFormalParameter() {
		LastFormalParameterContext _localctx = new LastFormalParameterContext(Context, State);
		EnterRule(_localctx, 40, RULE_lastFormalParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 241; type();
			State = 242; Match(T__1);
			State = 243; variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 42, RULE_methodBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 245; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(MyJavaParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(MyJavaParser.Identifier, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 44, RULE_qualifiedName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247; Match(Identifier);
			State = 252;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOT) {
				{
				{
				State = 248; Match(DOT);
				State = 249; Match(Identifier);
				}
				}
				State = 254;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode CharacterLiteral() { return GetToken(MyJavaParser.CharacterLiteral, 0); }
		public ITerminalNode BooleanLiteral() { return GetToken(MyJavaParser.BooleanLiteral, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 46, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 255;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << NullLiteral))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 48, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 257; Match(LBRACE);
			State = 261;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << BOOLEAN) | (1L << CHAR) | (1L << CLASS) | (1L << FOR) | (1L << NEW) | (1L << PRIVATE) | (1L << PUBLIC) | (1L << STATIC) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << LBRACE) | (1L << SEMI) | (1L << BANG) | (1L << TILDE) | (1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB) | (1L << Identifier))) != 0)) {
				{
				{
				State = 258; blockStatement();
				}
				}
				State = 263;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 264; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public TypeDeclarationContext typeDeclaration() {
			return GetRuleContext<TypeDeclarationContext>(0);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_blockStatement);
		try {
			State = 269;
			switch ( Interpreter.AdaptivePredict(TokenStream,29,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 266; localVariableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 267; statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 268; typeDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public VariableDeclaratorContext variableDeclarator() {
			return GetRuleContext<VariableDeclaratorContext>(0);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 52, RULE_localVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271; type();
			State = 272; variableDeclarator();
			State = 273; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public EnhancedForControlContext enhancedForControl() {
			return GetRuleContext<EnhancedForControlContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 54, RULE_statement);
		try {
			State = 286;
			switch (TokenStream.La(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 275; block();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 276; Match(FOR);
				State = 277; Match(LPAREN);
				State = 278; enhancedForControl();
				State = 279; Match(RPAREN);
				State = 280; statement();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 3);
				{
				State = 282; Match(SEMI);
				}
				break;
			case T__2:
			case NEW:
			case BooleanLiteral:
			case CharacterLiteral:
			case NullLiteral:
			case LPAREN:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case Identifier:
				EnterOuterAlt(_localctx, 4);
				{
				State = 283; expression(0);
				State = 284; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnhancedForControlContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnhancedForControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enhancedForControl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterEnhancedForControl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitEnhancedForControl(this);
		}
	}

	[RuleVersion(0)]
	public EnhancedForControlContext enhancedForControl() {
		EnhancedForControlContext _localctx = new EnhancedForControlContext(Context, State);
		EnterRule(_localctx, 56, RULE_enhancedForControl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 288; type();
			State = 289; variableDeclaratorId();
			State = 290; Match(COLON);
			State = 291; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 58, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293; expression(0);
			State = 298;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 294; Match(COMMA);
				State = 295; expression(0);
				}
				}
				State = 300;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public CreatorContext creator() {
			return GetRuleContext<CreatorContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(MyJavaParser.Identifier, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 309;
			switch (TokenStream.La(1)) {
			case INC:
			case DEC:
			case ADD:
			case SUB:
				{
				State = 302;
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 303; expression(13);
				}
				break;
			case BANG:
			case TILDE:
				{
				State = 304;
				_la = TokenStream.La(1);
				if ( !(_la==BANG || _la==TILDE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 305; expression(12);
				}
				break;
			case T__2:
			case BooleanLiteral:
			case CharacterLiteral:
			case NullLiteral:
			case LPAREN:
			case Identifier:
				{
				State = 306; primary();
				}
				break;
			case NEW:
				{
				State = 307; Match(NEW);
				State = 308; creator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 368;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 366;
					switch ( Interpreter.AdaptivePredict(TokenStream,34,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 311;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 312;
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MOD))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 313; expression(12);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 314;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 315;
						_la = TokenStream.La(1);
						if ( !(_la==ADD || _la==SUB) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 316; expression(11);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 317;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 318;
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << LT) | (1L << LE) | (1L << GE))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 319; expression(10);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 320;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 321;
						_la = TokenStream.La(1);
						if ( !(_la==EQUAL || _la==NOTEQUAL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 322; expression(9);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 323;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 324; Match(BITAND);
						State = 325; expression(8);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 326;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 327; Match(CARET);
						State = 328; expression(7);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 329;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 330; Match(BITOR);
						State = 331; expression(6);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 332;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 333; Match(AND);
						State = 334; expression(5);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 335;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 336; Match(OR);
						State = 337; expression(4);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 338;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 339; Match(QUESTION);
						State = 340; expression(0);
						State = 341; Match(COLON);
						State = 342; expression(3);
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 344;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 345;
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << ASSIGN))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 346; expression(1);
						}
						break;
					case 12:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 347;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 348; Match(DOT);
						State = 349; Match(Identifier);
						}
						break;
					case 13:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 350;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 351; Match(DOT);
						State = 352; Match(T__2);
						}
						break;
					case 14:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 353;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 354; Match(LBRACK);
						State = 355; expression(0);
						State = 356; Match(RBRACK);
						}
						break;
					case 15:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 358;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 359; Match(LPAREN);
						State = 361;
						_la = TokenStream.La(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << NEW) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << BANG) | (1L << TILDE) | (1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB) | (1L << Identifier))) != 0)) {
							{
							State = 360; expressionList();
							}
						}

						State = 363; Match(RPAREN);
						}
						break;
					case 16:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 364;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 365;
						_la = TokenStream.La(1);
						if ( !(_la==INC || _la==DEC) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						}
						break;
					}
					} 
				}
				State = 370;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,35,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(MyJavaParser.Identifier, 0); }
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 62, RULE_primary);
		try {
			State = 378;
			switch (TokenStream.La(1)) {
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 371; Match(LPAREN);
				State = 372; expression(0);
				State = 373; Match(RPAREN);
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 375; Match(T__2);
				}
				break;
			case BooleanLiteral:
			case CharacterLiteral:
			case NullLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 376; literal();
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 4);
				{
				State = 377; Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatorContext : ParserRuleContext {
		public CreatedNameContext createdName() {
			return GetRuleContext<CreatedNameContext>(0);
		}
		public ClassCreatorRestContext classCreatorRest() {
			return GetRuleContext<ClassCreatorRestContext>(0);
		}
		public CreatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_creator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterCreator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitCreator(this);
		}
	}

	[RuleVersion(0)]
	public CreatorContext creator() {
		CreatorContext _localctx = new CreatorContext(Context, State);
		EnterRule(_localctx, 64, RULE_creator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 380; createdName();
			{
			State = 381; classCreatorRest();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatedNameContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(MyJavaParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(MyJavaParser.Identifier, i);
		}
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public CreatedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterCreatedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitCreatedName(this);
		}
	}

	[RuleVersion(0)]
	public CreatedNameContext createdName() {
		CreatedNameContext _localctx = new CreatedNameContext(Context, State);
		EnterRule(_localctx, 66, RULE_createdName);
		int _la;
		try {
			State = 392;
			switch (TokenStream.La(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 383; Match(Identifier);
				State = 388;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==DOT) {
					{
					{
					State = 384; Match(DOT);
					State = 385; Match(Identifier);
					}
					}
					State = 390;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case BOOLEAN:
			case CHAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 391; primitiveType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassCreatorRestContext : ParserRuleContext {
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ClassCreatorRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classCreatorRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterClassCreatorRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitClassCreatorRest(this);
		}
	}

	[RuleVersion(0)]
	public ClassCreatorRestContext classCreatorRest() {
		ClassCreatorRestContext _localctx = new ClassCreatorRestContext(Context, State);
		EnterRule(_localctx, 68, RULE_classCreatorRest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394; arguments();
			State = 396;
			switch ( Interpreter.AdaptivePredict(TokenStream,39,Context) ) {
			case 1:
				{
				State = 395; classBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 70, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 398; Match(LPAREN);
			State = 400;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << NEW) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << BANG) | (1L << TILDE) | (1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB) | (1L << Identifier))) != 0)) {
				{
				State = 399; expressionList();
				}
			}

			State = 402; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 30: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 7);
		case 5: return Precpred(Context, 6);
		case 6: return Precpred(Context, 5);
		case 7: return Precpred(Context, 4);
		case 8: return Precpred(Context, 3);
		case 9: return Precpred(Context, 2);
		case 10: return Precpred(Context, 1);
		case 11: return Precpred(Context, 19);
		case 12: return Precpred(Context, 18);
		case 13: return Precpred(Context, 17);
		case 14: return Precpred(Context, 16);
		case 15: return Precpred(Context, 14);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3@\x197\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x4$\t$\x4%\t%\x3\x2\a\x2L\n\x2\f\x2\xE\x2O\v\x2\x3"+
		"\x2\x3\x2\x3\x3\a\x3T\n\x3\f\x3\xE\x3W\v\x3\x3\x3\x3\x3\x5\x3[\n\x3\x3"+
		"\x4\x6\x4^\n\x4\r\x4\xE\x4_\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\a\x6h"+
		"\n\x6\f\x6\xE\x6k\v\x6\x3\x6\x3\x6\x3\a\x3\a\a\aq\n\a\f\a\xE\at\v\a\x3"+
		"\a\x5\aw\n\a\x3\b\x3\b\x3\b\x5\b|\n\b\x3\t\x3\t\x5\t\x80\n\t\x3\t\x3\t"+
		"\x3\t\x3\t\a\t\x86\n\t\f\t\xE\t\x89\v\t\x3\t\x3\t\x5\t\x8D\n\t\x3\t\x3"+
		"\t\x5\t\x91\n\t\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x5\v\x9A\n\v\x3\f\x3"+
		"\f\x5\f\x9E\n\f\x3\r\x3\r\x3\r\x3\r\a\r\xA4\n\r\f\r\xE\r\xA7\v\r\x3\r"+
		"\x5\r\xAA\n\r\x5\r\xAC\n\r\x3\r\x3\r\x3\xE\x3\xE\x3\xE\a\xE\xB3\n\xE\f"+
		"\xE\xE\xE\xB6\v\xE\x3\xF\x3\xF\x3\xF\a\xF\xBB\n\xF\f\xF\xE\xF\xBE\v\xF"+
		"\x3\xF\x3\xF\x3\xF\a\xF\xC3\n\xF\f\xF\xE\xF\xC6\v\xF\x5\xF\xC8\n\xF\x3"+
		"\x10\x3\x10\x3\x10\a\x10\xCD\n\x10\f\x10\xE\x10\xD0\v\x10\x3\x11\x3\x11"+
		"\x3\x12\x3\x12\x3\x12\a\x12\xD7\n\x12\f\x12\xE\x12\xDA\v\x12\x3\x13\x3"+
		"\x13\x5\x13\xDE\n\x13\x3\x13\x3\x13\x3\x14\x3\x14\x3\x14\a\x14\xE5\n\x14"+
		"\f\x14\xE\x14\xE8\v\x14\x3\x14\x3\x14\x5\x14\xEC\n\x14\x3\x14\x5\x14\xEF"+
		"\n\x14\x3\x15\x3\x15\x3\x15\x3\x16\x3\x16\x3\x16\x3\x16\x3\x17\x3\x17"+
		"\x3\x18\x3\x18\x3\x18\a\x18\xFD\n\x18\f\x18\xE\x18\x100\v\x18\x3\x19\x3"+
		"\x19\x3\x1A\x3\x1A\a\x1A\x106\n\x1A\f\x1A\xE\x1A\x109\v\x1A\x3\x1A\x3"+
		"\x1A\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x110\n\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C"+
		"\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D\x3\x1D"+
		"\x3\x1D\x5\x1D\x121\n\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1F\x3"+
		"\x1F\x3\x1F\a\x1F\x12B\n\x1F\f\x1F\xE\x1F\x12E\v\x1F\x3 \x3 \x3 \x3 \x3"+
		" \x3 \x3 \x3 \x5 \x138\n \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 "+
		"\x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3"+
		" \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 \x3 "+
		"\x3 \x3 \x3 \x3 \x5 \x16C\n \x3 \x3 \x3 \a \x171\n \f \xE \x174\v \x3"+
		"!\x3!\x3!\x3!\x3!\x3!\x3!\x5!\x17D\n!\x3\"\x3\"\x3\"\x3#\x3#\x3#\a#\x185"+
		"\n#\f#\xE#\x188\v#\x3#\x5#\x18B\n#\x3$\x3$\x5$\x18F\n$\x3%\x3%\x5%\x193"+
		"\n%\x3%\x3%\x3%\x2\x3>&\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A\x1C"+
		"\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x46H\x2\r\x3\x2\x16\x18"+
		"\x3\x2\x11\x12\x3\x2\x1A\x1C\x3\x2\x33\x36\x3\x2)*\x4\x2\x37\x38<<\x3"+
		"\x2\x35\x36\x4\x2\'(./\x4\x2--\x30\x30\x4\x2\x6\x10&&\x3\x2\x33\x34\x1B1"+
		"\x2M\x3\x2\x2\x2\x4Z\x3\x2\x2\x2\x6]\x3\x2\x2\x2\b\x61\x3\x2\x2\x2\n\x65"+
		"\x3\x2\x2\x2\fv\x3\x2\x2\x2\xE{\x3\x2\x2\x2\x10\x7F\x3\x2\x2\x2\x12\x92"+
		"\x3\x2\x2\x2\x14\x96\x3\x2\x2\x2\x16\x9D\x3\x2\x2\x2\x18\x9F\x3\x2\x2"+
		"\x2\x1A\xAF\x3\x2\x2\x2\x1C\xC7\x3\x2\x2\x2\x1E\xC9\x3\x2\x2\x2 \xD1\x3"+
		"\x2\x2\x2\"\xD3\x3\x2\x2\x2$\xDB\x3\x2\x2\x2&\xEE\x3\x2\x2\x2(\xF0\x3"+
		"\x2\x2\x2*\xF3\x3\x2\x2\x2,\xF7\x3\x2\x2\x2.\xF9\x3\x2\x2\x2\x30\x101"+
		"\x3\x2\x2\x2\x32\x103\x3\x2\x2\x2\x34\x10F\x3\x2\x2\x2\x36\x111\x3\x2"+
		"\x2\x2\x38\x120\x3\x2\x2\x2:\x122\x3\x2\x2\x2<\x127\x3\x2\x2\x2>\x137"+
		"\x3\x2\x2\x2@\x17C\x3\x2\x2\x2\x42\x17E\x3\x2\x2\x2\x44\x18A\x3\x2\x2"+
		"\x2\x46\x18C\x3\x2\x2\x2H\x190\x3\x2\x2\x2JL\x5\x4\x3\x2KJ\x3\x2\x2\x2"+
		"LO\x3\x2\x2\x2MK\x3\x2\x2\x2MN\x3\x2\x2\x2NP\x3\x2\x2\x2OM\x3\x2\x2\x2"+
		"PQ\a\x2\x2\x3Q\x3\x3\x2\x2\x2RT\x5\x6\x4\x2SR\x3\x2\x2\x2TW\x3\x2\x2\x2"+
		"US\x3\x2\x2\x2UV\x3\x2\x2\x2VX\x3\x2\x2\x2WU\x3\x2\x2\x2X[\x5\b\x5\x2"+
		"Y[\a#\x2\x2ZU\x3\x2\x2\x2ZY\x3\x2\x2\x2[\x5\x3\x2\x2\x2\\^\t\x2\x2\x2"+
		"]\\\x3\x2\x2\x2^_\x3\x2\x2\x2_]\x3\x2\x2\x2_`\x3\x2\x2\x2`\a\x3\x2\x2"+
		"\x2\x61\x62\a\x13\x2\x2\x62\x63\a=\x2\x2\x63\x64\x5\n\x6\x2\x64\t\x3\x2"+
		"\x2\x2\x65i\a\x1F\x2\x2\x66h\x5\f\a\x2g\x66\x3\x2\x2\x2hk\x3\x2\x2\x2"+
		"ig\x3\x2\x2\x2ij\x3\x2\x2\x2jl\x3\x2\x2\x2ki\x3\x2\x2\x2lm\a \x2\x2m\v"+
		"\x3\x2\x2\x2nw\a#\x2\x2oq\x5\x6\x4\x2po\x3\x2\x2\x2qt\x3\x2\x2\x2rp\x3"+
		"\x2\x2\x2rs\x3\x2\x2\x2su\x3\x2\x2\x2tr\x3\x2\x2\x2uw\x5\xE\b\x2vn\x3"+
		"\x2\x2\x2vr\x3\x2\x2\x2w\r\x3\x2\x2\x2x|\x5\x10\t\x2y|\x5\x12\n\x2z|\x5"+
		"\b\x5\x2{x\x3\x2\x2\x2{y\x3\x2\x2\x2{z\x3\x2\x2\x2|\xF\x3\x2\x2\x2}\x80"+
		"\x5\x1C\xF\x2~\x80\a\x19\x2\x2\x7F}\x3\x2\x2\x2\x7F~\x3\x2\x2\x2\x80\x81"+
		"\x3\x2\x2\x2\x81\x82\a=\x2\x2\x82\x87\x5$\x13\x2\x83\x84\a!\x2\x2\x84"+
		"\x86\a\"\x2\x2\x85\x83\x3\x2\x2\x2\x86\x89\x3\x2\x2\x2\x87\x85\x3\x2\x2"+
		"\x2\x87\x88\x3\x2\x2\x2\x88\x8C\x3\x2\x2\x2\x89\x87\x3\x2\x2\x2\x8A\x8B"+
		"\a\x3\x2\x2\x8B\x8D\x5\"\x12\x2\x8C\x8A\x3\x2\x2\x2\x8C\x8D\x3\x2\x2\x2"+
		"\x8D\x90\x3\x2\x2\x2\x8E\x91\x5,\x17\x2\x8F\x91\a#\x2\x2\x90\x8E\x3\x2"+
		"\x2\x2\x90\x8F\x3\x2\x2\x2\x91\x11\x3\x2\x2\x2\x92\x93\x5\x1C\xF\x2\x93"+
		"\x94\x5\x14\v\x2\x94\x95\a#\x2\x2\x95\x13\x3\x2\x2\x2\x96\x99\x5\x1A\xE"+
		"\x2\x97\x98\a&\x2\x2\x98\x9A\x5\x16\f\x2\x99\x97\x3\x2\x2\x2\x99\x9A\x3"+
		"\x2\x2\x2\x9A\x15\x3\x2\x2\x2\x9B\x9E\x5\x18\r\x2\x9C\x9E\x5> \x2\x9D"+
		"\x9B\x3\x2\x2\x2\x9D\x9C\x3\x2\x2\x2\x9E\x17\x3\x2\x2\x2\x9F\xAB\a\x1F"+
		"\x2\x2\xA0\xA5\x5\x16\f\x2\xA1\xA2\a$\x2\x2\xA2\xA4\x5\x16\f\x2\xA3\xA1"+
		"\x3\x2\x2\x2\xA4\xA7\x3\x2\x2\x2\xA5\xA3\x3\x2\x2\x2\xA5\xA6\x3\x2\x2"+
		"\x2\xA6\xA9\x3\x2\x2\x2\xA7\xA5\x3\x2\x2\x2\xA8\xAA\a$\x2\x2\xA9\xA8\x3"+
		"\x2\x2\x2\xA9\xAA\x3\x2\x2\x2\xAA\xAC\x3\x2\x2\x2\xAB\xA0\x3\x2\x2\x2"+
		"\xAB\xAC\x3\x2\x2\x2\xAC\xAD\x3\x2\x2\x2\xAD\xAE\a \x2\x2\xAE\x19\x3\x2"+
		"\x2\x2\xAF\xB4\a=\x2\x2\xB0\xB1\a!\x2\x2\xB1\xB3\a\"\x2\x2\xB2\xB0\x3"+
		"\x2\x2\x2\xB3\xB6\x3\x2\x2\x2\xB4\xB2\x3\x2\x2\x2\xB4\xB5\x3\x2\x2\x2"+
		"\xB5\x1B\x3\x2\x2\x2\xB6\xB4\x3\x2\x2\x2\xB7\xBC\x5\x1E\x10\x2\xB8\xB9"+
		"\a!\x2\x2\xB9\xBB\a\"\x2\x2\xBA\xB8\x3\x2\x2\x2\xBB\xBE\x3\x2\x2\x2\xBC"+
		"\xBA\x3\x2\x2\x2\xBC\xBD\x3\x2\x2\x2\xBD\xC8\x3\x2\x2\x2\xBE\xBC\x3\x2"+
		"\x2\x2\xBF\xC4\x5 \x11\x2\xC0\xC1\a!\x2\x2\xC1\xC3\a\"\x2\x2\xC2\xC0\x3"+
		"\x2\x2\x2\xC3\xC6\x3\x2\x2\x2\xC4\xC2\x3\x2\x2\x2\xC4\xC5\x3\x2\x2\x2"+
		"\xC5\xC8\x3\x2\x2\x2\xC6\xC4\x3\x2\x2\x2\xC7\xB7\x3\x2\x2\x2\xC7\xBF\x3"+
		"\x2\x2\x2\xC8\x1D\x3\x2\x2\x2\xC9\xCE\a=\x2\x2\xCA\xCB\a%\x2\x2\xCB\xCD"+
		"\a=\x2\x2\xCC\xCA\x3\x2\x2\x2\xCD\xD0\x3\x2\x2\x2\xCE\xCC\x3\x2\x2\x2"+
		"\xCE\xCF\x3\x2\x2\x2\xCF\x1F\x3\x2\x2\x2\xD0\xCE\x3\x2\x2\x2\xD1\xD2\t"+
		"\x3\x2\x2\xD2!\x3\x2\x2\x2\xD3\xD8\x5.\x18\x2\xD4\xD5\a$\x2\x2\xD5\xD7"+
		"\x5.\x18\x2\xD6\xD4\x3\x2\x2\x2\xD7\xDA\x3\x2\x2\x2\xD8\xD6\x3\x2\x2\x2"+
		"\xD8\xD9\x3\x2\x2\x2\xD9#\x3\x2\x2\x2\xDA\xD8\x3\x2\x2\x2\xDB\xDD\a\x1D"+
		"\x2\x2\xDC\xDE\x5&\x14\x2\xDD\xDC\x3\x2\x2\x2\xDD\xDE\x3\x2\x2\x2\xDE"+
		"\xDF\x3\x2\x2\x2\xDF\xE0\a\x1E\x2\x2\xE0%\x3\x2\x2\x2\xE1\xE6\x5(\x15"+
		"\x2\xE2\xE3\a$\x2\x2\xE3\xE5\x5(\x15\x2\xE4\xE2\x3\x2\x2\x2\xE5\xE8\x3"+
		"\x2\x2\x2\xE6\xE4\x3\x2\x2\x2\xE6\xE7\x3\x2\x2\x2\xE7\xEB\x3\x2\x2\x2"+
		"\xE8\xE6\x3\x2\x2\x2\xE9\xEA\a$\x2\x2\xEA\xEC\x5*\x16\x2\xEB\xE9\x3\x2"+
		"\x2\x2\xEB\xEC\x3\x2\x2\x2\xEC\xEF\x3\x2\x2\x2\xED\xEF\x5*\x16\x2\xEE"+
		"\xE1\x3\x2\x2\x2\xEE\xED\x3\x2\x2\x2\xEF\'\x3\x2\x2\x2\xF0\xF1\x5\x1C"+
		"\xF\x2\xF1\xF2\x5\x1A\xE\x2\xF2)\x3\x2\x2\x2\xF3\xF4\x5\x1C\xF\x2\xF4"+
		"\xF5\a\x4\x2\x2\xF5\xF6\x5\x1A\xE\x2\xF6+\x3\x2\x2\x2\xF7\xF8\x5\x32\x1A"+
		"\x2\xF8-\x3\x2\x2\x2\xF9\xFE\a=\x2\x2\xFA\xFB\a%\x2\x2\xFB\xFD\a=\x2\x2"+
		"\xFC\xFA\x3\x2\x2\x2\xFD\x100\x3\x2\x2\x2\xFE\xFC\x3\x2\x2\x2\xFE\xFF"+
		"\x3\x2\x2\x2\xFF/\x3\x2\x2\x2\x100\xFE\x3\x2\x2\x2\x101\x102\t\x4\x2\x2"+
		"\x102\x31\x3\x2\x2\x2\x103\x107\a\x1F\x2\x2\x104\x106\x5\x34\x1B\x2\x105"+
		"\x104\x3\x2\x2\x2\x106\x109\x3\x2\x2\x2\x107\x105\x3\x2\x2\x2\x107\x108"+
		"\x3\x2\x2\x2\x108\x10A\x3\x2\x2\x2\x109\x107\x3\x2\x2\x2\x10A\x10B\a "+
		"\x2\x2\x10B\x33\x3\x2\x2\x2\x10C\x110\x5\x36\x1C\x2\x10D\x110\x5\x38\x1D"+
		"\x2\x10E\x110\x5\x4\x3\x2\x10F\x10C\x3\x2\x2\x2\x10F\x10D\x3\x2\x2\x2"+
		"\x10F\x10E\x3\x2\x2\x2\x110\x35\x3\x2\x2\x2\x111\x112\x5\x1C\xF\x2\x112"+
		"\x113\x5\x14\v\x2\x113\x114\a#\x2\x2\x114\x37\x3\x2\x2\x2\x115\x121\x5"+
		"\x32\x1A\x2\x116\x117\a\x14\x2\x2\x117\x118\a\x1D\x2\x2\x118\x119\x5:"+
		"\x1E\x2\x119\x11A\a\x1E\x2\x2\x11A\x11B\x5\x38\x1D\x2\x11B\x121\x3\x2"+
		"\x2\x2\x11C\x121\a#\x2\x2\x11D\x11E\x5> \x2\x11E\x11F\a#\x2\x2\x11F\x121"+
		"\x3\x2\x2\x2\x120\x115\x3\x2\x2\x2\x120\x116\x3\x2\x2\x2\x120\x11C\x3"+
		"\x2\x2\x2\x120\x11D\x3\x2\x2\x2\x121\x39\x3\x2\x2\x2\x122\x123\x5\x1C"+
		"\xF\x2\x123\x124\x5\x1A\xE\x2\x124\x125\a,\x2\x2\x125\x126\x5> \x2\x126"+
		";\x3\x2\x2\x2\x127\x12C\x5> \x2\x128\x129\a$\x2\x2\x129\x12B\x5> \x2\x12A"+
		"\x128\x3\x2\x2\x2\x12B\x12E\x3\x2\x2\x2\x12C\x12A\x3\x2\x2\x2\x12C\x12D"+
		"\x3\x2\x2\x2\x12D=\x3\x2\x2\x2\x12E\x12C\x3\x2\x2\x2\x12F\x130\b \x1\x2"+
		"\x130\x131\t\x5\x2\x2\x131\x138\x5> \xF\x132\x133\t\x6\x2\x2\x133\x138"+
		"\x5> \xE\x134\x138\x5@!\x2\x135\x136\a\x15\x2\x2\x136\x138\x5\x42\"\x2"+
		"\x137\x12F\x3\x2\x2\x2\x137\x132\x3\x2\x2\x2\x137\x134\x3\x2\x2\x2\x137"+
		"\x135\x3\x2\x2\x2\x138\x172\x3\x2\x2\x2\x139\x13A\f\r\x2\x2\x13A\x13B"+
		"\t\a\x2\x2\x13B\x171\x5> \xE\x13C\x13D\f\f\x2\x2\x13D\x13E\t\b\x2\x2\x13E"+
		"\x171\x5> \r\x13F\x140\f\v\x2\x2\x140\x141\t\t\x2\x2\x141\x171\x5> \f"+
		"\x142\x143\f\n\x2\x2\x143\x144\t\n\x2\x2\x144\x171\x5> \v\x145\x146\f"+
		"\t\x2\x2\x146\x147\a\x39\x2\x2\x147\x171\x5> \n\x148\x149\f\b\x2\x2\x149"+
		"\x14A\a;\x2\x2\x14A\x171\x5> \t\x14B\x14C\f\a\x2\x2\x14C\x14D\a:\x2\x2"+
		"\x14D\x171\x5> \b\x14E\x14F\f\x6\x2\x2\x14F\x150\a\x31\x2\x2\x150\x171"+
		"\x5> \a\x151\x152\f\x5\x2\x2\x152\x153\a\x32\x2\x2\x153\x171\x5> \x6\x154"+
		"\x155\f\x4\x2\x2\x155\x156\a+\x2\x2\x156\x157\x5> \x2\x157\x158\a,\x2"+
		"\x2\x158\x159\x5> \x5\x159\x171\x3\x2\x2\x2\x15A\x15B\f\x3\x2\x2\x15B"+
		"\x15C\t\v\x2\x2\x15C\x171\x5> \x3\x15D\x15E\f\x15\x2\x2\x15E\x15F\a%\x2"+
		"\x2\x15F\x171\a=\x2\x2\x160\x161\f\x14\x2\x2\x161\x162\a%\x2\x2\x162\x171"+
		"\a\x5\x2\x2\x163\x164\f\x13\x2\x2\x164\x165\a!\x2\x2\x165\x166\x5> \x2"+
		"\x166\x167\a\"\x2\x2\x167\x171\x3\x2\x2\x2\x168\x169\f\x12\x2\x2\x169"+
		"\x16B\a\x1D\x2\x2\x16A\x16C\x5<\x1F\x2\x16B\x16A\x3\x2\x2\x2\x16B\x16C"+
		"\x3\x2\x2\x2\x16C\x16D\x3\x2\x2\x2\x16D\x171\a\x1E\x2\x2\x16E\x16F\f\x10"+
		"\x2\x2\x16F\x171\t\f\x2\x2\x170\x139\x3\x2\x2\x2\x170\x13C\x3\x2\x2\x2"+
		"\x170\x13F\x3\x2\x2\x2\x170\x142\x3\x2\x2\x2\x170\x145\x3\x2\x2\x2\x170"+
		"\x148\x3\x2\x2\x2\x170\x14B\x3\x2\x2\x2\x170\x14E\x3\x2\x2\x2\x170\x151"+
		"\x3\x2\x2\x2\x170\x154\x3\x2\x2\x2\x170\x15A\x3\x2\x2\x2\x170\x15D\x3"+
		"\x2\x2\x2\x170\x160\x3\x2\x2\x2\x170\x163\x3\x2\x2\x2\x170\x168\x3\x2"+
		"\x2\x2\x170\x16E\x3\x2\x2\x2\x171\x174\x3\x2\x2\x2\x172\x170\x3\x2\x2"+
		"\x2\x172\x173\x3\x2\x2\x2\x173?\x3\x2\x2\x2\x174\x172\x3\x2\x2\x2\x175"+
		"\x176\a\x1D\x2\x2\x176\x177\x5> \x2\x177\x178\a\x1E\x2\x2\x178\x17D\x3"+
		"\x2\x2\x2\x179\x17D\a\x5\x2\x2\x17A\x17D\x5\x30\x19\x2\x17B\x17D\a=\x2"+
		"\x2\x17C\x175\x3\x2\x2\x2\x17C\x179\x3\x2\x2\x2\x17C\x17A\x3\x2\x2\x2"+
		"\x17C\x17B\x3\x2\x2\x2\x17D\x41\x3\x2\x2\x2\x17E\x17F\x5\x44#\x2\x17F"+
		"\x180\x5\x46$\x2\x180\x43\x3\x2\x2\x2\x181\x186\a=\x2\x2\x182\x183\a%"+
		"\x2\x2\x183\x185\a=\x2\x2\x184\x182\x3\x2\x2\x2\x185\x188\x3\x2\x2\x2"+
		"\x186\x184\x3\x2\x2\x2\x186\x187\x3\x2\x2\x2\x187\x18B\x3\x2\x2\x2\x188"+
		"\x186\x3\x2\x2\x2\x189\x18B\x5 \x11\x2\x18A\x181\x3\x2\x2\x2\x18A\x189"+
		"\x3\x2\x2\x2\x18B\x45\x3\x2\x2\x2\x18C\x18E\x5H%\x2\x18D\x18F\x5\n\x6"+
		"\x2\x18E\x18D\x3\x2\x2\x2\x18E\x18F\x3\x2\x2\x2\x18FG\x3\x2\x2\x2\x190"+
		"\x192\a\x1D\x2\x2\x191\x193\x5<\x1F\x2\x192\x191\x3\x2\x2\x2\x192\x193"+
		"\x3\x2\x2\x2\x193\x194\x3\x2\x2\x2\x194\x195\a\x1E\x2\x2\x195I\x3\x2\x2"+
		"\x2+MUZ_irv{\x7F\x87\x8C\x90\x99\x9D\xA5\xA9\xAB\xB4\xBC\xC4\xC7\xCE\xD8"+
		"\xDD\xE6\xEB\xEE\xFE\x107\x10F\x120\x12C\x137\x16B\x170\x172\x17C\x186"+
		"\x18A\x18E\x192";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
