//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MyJava.g4 by ANTLR 4.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

using System;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.5")]
[System.CLSCompliant(false)]
public partial class MyJavaParser : Parser {
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, BOOLEAN=15, CHAR=16, 
		CLASS=17, FOR=18, NEW=19, PRIVATE=20, PUBLIC=21, STATIC=22, VOID=23, BooleanLiteral=24, 
		CharacterLiteral=25, NullLiteral=26, LPAREN=27, RPAREN=28, LBRACE=29, 
		RBRACE=30, LBRACK=31, RBRACK=32, SEMI=33, COMMA=34, DOT=35, ASSIGN=36, 
		GT=37, LT=38, BANG=39, TILDE=40, QUESTION=41, COLON=42, EQUAL=43, LE=44, 
		GE=45, NOTEQUAL=46, AND=47, OR=48, INC=49, DEC=50, ADD=51, SUB=52, MUL=53, 
		DIV=54, BITAND=55, BITOR=56, CARET=57, MOD=58, Identifier=59, WS=60, COMMENT=61, 
		LINE_COMMENT=62;
	public const int
		RULE_compilationUnit = 0, RULE_typeDeclaration = 1, RULE_classOrInterfaceModifier = 2, 
		RULE_classDeclaration = 3, RULE_classBody = 4, RULE_classBodyDeclaration = 5, 
		RULE_memberDeclaration = 6, RULE_methodDeclaration = 7, RULE_fieldDeclaration = 8, 
		RULE_variableDeclarator = 9, RULE_variableDeclaratorId = 10, RULE_type = 11, 
		RULE_classOrInterfaceType = 12, RULE_primitiveType = 13, RULE_qualifiedNameList = 14, 
		RULE_formalParameters = 15, RULE_formalParameterList = 16, RULE_formalParameter = 17, 
		RULE_lastFormalParameter = 18, RULE_methodBody = 19, RULE_qualifiedName = 20, 
		RULE_literal = 21, RULE_block = 22, RULE_blockStatement = 23, RULE_localVariableDeclaration = 24, 
		RULE_statement = 25, RULE_enhancedForControl = 26, RULE_expressionList = 27, 
		RULE_expression = 28, RULE_primary = 29, RULE_creator = 30, RULE_createdName = 31, 
		RULE_classCreatorRest = 32, RULE_arguments = 33;
	public static readonly string[] ruleNames = {
		"compilationUnit", "typeDeclaration", "classOrInterfaceModifier", "classDeclaration", 
		"classBody", "classBodyDeclaration", "memberDeclaration", "methodDeclaration", 
		"fieldDeclaration", "variableDeclarator", "variableDeclaratorId", "type", 
		"classOrInterfaceType", "primitiveType", "qualifiedNameList", "formalParameters", 
		"formalParameterList", "formalParameter", "lastFormalParameter", "methodBody", 
		"qualifiedName", "literal", "block", "blockStatement", "localVariableDeclaration", 
		"statement", "enhancedForControl", "expressionList", "expression", "primary", 
		"creator", "createdName", "classCreatorRest", "arguments"
	};

	private static readonly string[] _LiteralNames = {
		null, "'throws'", "'...'", "'this'", "'+='", "'-='", "'*='", "'/='", "'&='", 
		"'|='", "'^='", "'>>='", "'>>>='", "'<<='", "'%='", "'boolean'", "'char'", 
		"'class'", "'for'", "'new'", "'private'", "'public'", "'static'", "'void'", 
		null, null, "'null'", "'('", "')'", "'{'", "'}'", "'['", "']'", "';'", 
		"','", "'.'", "'='", "'>'", "'<'", "'!'", "'~'", "'?'", "':'", "'=='", 
		"'<='", "'>='", "'!='", "'&&'", "'||'", "'++'", "'--'", "'+'", "'-'", 
		"'*'", "'/'", "'&'", "'|'", "'^'", "'%'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "BOOLEAN", "CHAR", "CLASS", "FOR", "NEW", "PRIVATE", 
		"PUBLIC", "STATIC", "VOID", "BooleanLiteral", "CharacterLiteral", "NullLiteral", 
		"LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACK", "RBRACK", "SEMI", "COMMA", 
		"DOT", "ASSIGN", "GT", "LT", "BANG", "TILDE", "QUESTION", "COLON", "EQUAL", 
		"LE", "GE", "NOTEQUAL", "AND", "OR", "INC", "DEC", "ADD", "SUB", "MUL", 
		"DIV", "BITAND", "BITOR", "CARET", "MOD", "Identifier", "WS", "COMMENT", 
		"LINE_COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MyJava.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public MyJavaParser(ITokenStream input)
		: base(input)
	{
		Interpreter = new ParserATNSimulator(this,_ATN);
	}
	public partial class CompilationUnitContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(MyJavaParser.Eof, 0); }
		public TypeDeclarationContext[] typeDeclaration() {
			return GetRuleContexts<TypeDeclarationContext>();
		}
		public TypeDeclarationContext typeDeclaration(int i) {
			return GetRuleContext<TypeDeclarationContext>(i);
		}
		public CompilationUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compilationUnit; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterCompilationUnit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitCompilationUnit(this);
		}
	}

	[RuleVersion(0)]
	public CompilationUnitContext compilationUnit() {
		CompilationUnitContext _localctx = new CompilationUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compilationUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << CLASS) | (1L << PRIVATE) | (1L << PUBLIC) | (1L << STATIC) | (1L << SEMI))) != 0)) {
				{
				{
				State = 68; typeDeclaration();
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 74; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeDeclarationContext : ParserRuleContext {
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public ClassOrInterfaceModifierContext[] classOrInterfaceModifier() {
			return GetRuleContexts<ClassOrInterfaceModifierContext>();
		}
		public ClassOrInterfaceModifierContext classOrInterfaceModifier(int i) {
			return GetRuleContext<ClassOrInterfaceModifierContext>(i);
		}
		public TypeDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterTypeDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitTypeDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public TypeDeclarationContext typeDeclaration() {
		TypeDeclarationContext _localctx = new TypeDeclarationContext(Context, State);
		EnterRule(_localctx, 2, RULE_typeDeclaration);
		int _la;
		try {
			State = 84;
			switch (TokenStream.La(1)) {
			case CLASS:
			case PRIVATE:
			case PUBLIC:
			case STATIC:
				EnterOuterAlt(_localctx, 1);
				{
				State = 79;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRIVATE) | (1L << PUBLIC) | (1L << STATIC))) != 0)) {
					{
					{
					State = 76; classOrInterfaceModifier();
					}
					}
					State = 81;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 82; classDeclaration();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 2);
				{
				State = 83; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrInterfaceModifierContext : ParserRuleContext {
		public ClassOrInterfaceModifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrInterfaceModifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterClassOrInterfaceModifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitClassOrInterfaceModifier(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrInterfaceModifierContext classOrInterfaceModifier() {
		ClassOrInterfaceModifierContext _localctx = new ClassOrInterfaceModifierContext(Context, State);
		EnterRule(_localctx, 4, RULE_classOrInterfaceModifier);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 87;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 86;
					_la = TokenStream.La(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRIVATE) | (1L << PUBLIC) | (1L << STATIC))) != 0)) ) {
					ErrorHandler.RecoverInline(this);
					}
					else {
					    Consume();
					}
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 89;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassDeclarationContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(MyJavaParser.Identifier, 0); }
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ClassDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterClassDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitClassDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ClassDeclarationContext classDeclaration() {
		ClassDeclarationContext _localctx = new ClassDeclarationContext(Context, State);
		EnterRule(_localctx, 6, RULE_classDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91; Match(CLASS);
			State = 92; Match(Identifier);
			State = 93; classBody();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyContext : ParserRuleContext {
		public ClassBodyDeclarationContext[] classBodyDeclaration() {
			return GetRuleContexts<ClassBodyDeclarationContext>();
		}
		public ClassBodyDeclarationContext classBodyDeclaration(int i) {
			return GetRuleContext<ClassBodyDeclarationContext>(i);
		}
		public ClassBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterClassBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitClassBody(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyContext classBody() {
		ClassBodyContext _localctx = new ClassBodyContext(Context, State);
		EnterRule(_localctx, 8, RULE_classBody);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95; Match(LBRACE);
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHAR) | (1L << CLASS) | (1L << PRIVATE) | (1L << PUBLIC) | (1L << STATIC) | (1L << VOID) | (1L << SEMI) | (1L << Identifier))) != 0)) {
				{
				{
				State = 96; classBodyDeclaration();
				}
				}
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 102; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassBodyDeclarationContext : ParserRuleContext {
		public MemberDeclarationContext memberDeclaration() {
			return GetRuleContext<MemberDeclarationContext>(0);
		}
		public ClassOrInterfaceModifierContext[] classOrInterfaceModifier() {
			return GetRuleContexts<ClassOrInterfaceModifierContext>();
		}
		public ClassOrInterfaceModifierContext classOrInterfaceModifier(int i) {
			return GetRuleContext<ClassOrInterfaceModifierContext>(i);
		}
		public ClassBodyDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classBodyDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterClassBodyDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitClassBodyDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public ClassBodyDeclarationContext classBodyDeclaration() {
		ClassBodyDeclarationContext _localctx = new ClassBodyDeclarationContext(Context, State);
		EnterRule(_localctx, 10, RULE_classBodyDeclaration);
		int _la;
		try {
			State = 112;
			switch (TokenStream.La(1)) {
			case SEMI:
				EnterOuterAlt(_localctx, 1);
				{
				State = 104; Match(SEMI);
				}
				break;
			case BOOLEAN:
			case CHAR:
			case CLASS:
			case PRIVATE:
			case PUBLIC:
			case STATIC:
			case VOID:
			case Identifier:
				EnterOuterAlt(_localctx, 2);
				{
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << PRIVATE) | (1L << PUBLIC) | (1L << STATIC))) != 0)) {
					{
					{
					State = 105; classOrInterfaceModifier();
					}
					}
					State = 110;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				State = 111; memberDeclaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MemberDeclarationContext : ParserRuleContext {
		public MemberDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_memberDeclaration; } }
	 
		public MemberDeclarationContext() { }
		public virtual void CopyFrom(MemberDeclarationContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ClassMemberDeclContext : MemberDeclarationContext {
		public ClassDeclarationContext classDeclaration() {
			return GetRuleContext<ClassDeclarationContext>(0);
		}
		public ClassMemberDeclContext(MemberDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterClassMemberDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitClassMemberDecl(this);
		}
	}
	public partial class MethodMemberDeclContext : MemberDeclarationContext {
		public MethodDeclarationContext methodDeclaration() {
			return GetRuleContext<MethodDeclarationContext>(0);
		}
		public MethodMemberDeclContext(MemberDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterMethodMemberDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitMethodMemberDecl(this);
		}
	}
	public partial class FieldMemberDeclContext : MemberDeclarationContext {
		public FieldDeclarationContext fieldDeclaration() {
			return GetRuleContext<FieldDeclarationContext>(0);
		}
		public FieldMemberDeclContext(MemberDeclarationContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterFieldMemberDecl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitFieldMemberDecl(this);
		}
	}

	[RuleVersion(0)]
	public MemberDeclarationContext memberDeclaration() {
		MemberDeclarationContext _localctx = new MemberDeclarationContext(Context, State);
		EnterRule(_localctx, 12, RULE_memberDeclaration);
		try {
			State = 117;
			switch ( Interpreter.AdaptivePredict(TokenStream,7,Context) ) {
			case 1:
				_localctx = new MethodMemberDeclContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 114; methodDeclaration();
				}
				break;
			case 2:
				_localctx = new FieldMemberDeclContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 115; fieldDeclaration();
				}
				break;
			case 3:
				_localctx = new ClassMemberDeclContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 116; classDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodDeclarationContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(MyJavaParser.Identifier, 0); }
		public FormalParametersContext formalParameters() {
			return GetRuleContext<FormalParametersContext>(0);
		}
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public MethodBodyContext methodBody() {
			return GetRuleContext<MethodBodyContext>(0);
		}
		public QualifiedNameListContext qualifiedNameList() {
			return GetRuleContext<QualifiedNameListContext>(0);
		}
		public MethodDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterMethodDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitMethodDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public MethodDeclarationContext methodDeclaration() {
		MethodDeclarationContext _localctx = new MethodDeclarationContext(Context, State);
		EnterRule(_localctx, 14, RULE_methodDeclaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 121;
			switch (TokenStream.La(1)) {
			case BOOLEAN:
			case CHAR:
			case Identifier:
				{
				State = 119; type();
				}
				break;
			case VOID:
				{
				State = 120; Match(VOID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 123; Match(Identifier);
			State = 124; formalParameters();
			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==LBRACK) {
				{
				{
				State = 125; Match(LBRACK);
				State = 126; Match(RBRACK);
				}
				}
				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 134;
			_la = TokenStream.La(1);
			if (_la==T__0) {
				{
				State = 132; Match(T__0);
				State = 133; qualifiedNameList();
				}
			}

			State = 138;
			switch (TokenStream.La(1)) {
			case LBRACE:
				{
				State = 136; methodBody();
				}
				break;
			case SEMI:
				{
				State = 137; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FieldDeclarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public VariableDeclaratorContext variableDeclarator() {
			return GetRuleContext<VariableDeclaratorContext>(0);
		}
		public FieldDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fieldDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterFieldDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitFieldDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public FieldDeclarationContext fieldDeclaration() {
		FieldDeclarationContext _localctx = new FieldDeclarationContext(Context, State);
		EnterRule(_localctx, 16, RULE_fieldDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; type();
			State = 141; variableDeclarator();
			State = 142; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorContext : ParserRuleContext {
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public VariableDeclaratorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclarator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterVariableDeclarator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitVariableDeclarator(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorContext variableDeclarator() {
		VariableDeclaratorContext _localctx = new VariableDeclaratorContext(Context, State);
		EnterRule(_localctx, 18, RULE_variableDeclarator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 144; variableDeclaratorId();
			State = 147;
			_la = TokenStream.La(1);
			if (_la==ASSIGN) {
				{
				State = 145; Match(ASSIGN);
				State = 146; expression(0);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableDeclaratorIdContext : ParserRuleContext {
		public ITerminalNode Identifier() { return GetToken(MyJavaParser.Identifier, 0); }
		public VariableDeclaratorIdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variableDeclaratorId; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterVariableDeclaratorId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitVariableDeclaratorId(this);
		}
	}

	[RuleVersion(0)]
	public VariableDeclaratorIdContext variableDeclaratorId() {
		VariableDeclaratorIdContext _localctx = new VariableDeclaratorIdContext(Context, State);
		EnterRule(_localctx, 20, RULE_variableDeclaratorId);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149; Match(Identifier);
			State = 154;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==LBRACK) {
				{
				{
				State = 150; Match(LBRACK);
				State = 151; Match(RBRACK);
				}
				}
				State = 156;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ClassOrInterfaceTypeContext classOrInterfaceType() {
			return GetRuleContext<ClassOrInterfaceTypeContext>(0);
		}
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 22, RULE_type);
		int _la;
		try {
			State = 173;
			switch (TokenStream.La(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 157; classOrInterfaceType();
				State = 162;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==LBRACK) {
					{
					{
					State = 158; Match(LBRACK);
					State = 159; Match(RBRACK);
					}
					}
					State = 164;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case BOOLEAN:
			case CHAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 165; primitiveType();
				State = 170;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==LBRACK) {
					{
					{
					State = 166; Match(LBRACK);
					State = 167; Match(RBRACK);
					}
					}
					State = 172;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassOrInterfaceTypeContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(MyJavaParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(MyJavaParser.Identifier, i);
		}
		public ClassOrInterfaceTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classOrInterfaceType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterClassOrInterfaceType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitClassOrInterfaceType(this);
		}
	}

	[RuleVersion(0)]
	public ClassOrInterfaceTypeContext classOrInterfaceType() {
		ClassOrInterfaceTypeContext _localctx = new ClassOrInterfaceTypeContext(Context, State);
		EnterRule(_localctx, 24, RULE_classOrInterfaceType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175; Match(Identifier);
			State = 180;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOT) {
				{
				{
				State = 176; Match(DOT);
				State = 177; Match(Identifier);
				}
				}
				State = 182;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PrimitiveTypeContext : ParserRuleContext {
		public PrimitiveTypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primitiveType; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterPrimitiveType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitPrimitiveType(this);
		}
	}

	[RuleVersion(0)]
	public PrimitiveTypeContext primitiveType() {
		PrimitiveTypeContext _localctx = new PrimitiveTypeContext(Context, State);
		EnterRule(_localctx, 26, RULE_primitiveType);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 183;
			_la = TokenStream.La(1);
			if ( !(_la==BOOLEAN || _la==CHAR) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameListContext : ParserRuleContext {
		public QualifiedNameContext[] qualifiedName() {
			return GetRuleContexts<QualifiedNameContext>();
		}
		public QualifiedNameContext qualifiedName(int i) {
			return GetRuleContext<QualifiedNameContext>(i);
		}
		public QualifiedNameListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedNameList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterQualifiedNameList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitQualifiedNameList(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameListContext qualifiedNameList() {
		QualifiedNameListContext _localctx = new QualifiedNameListContext(Context, State);
		EnterRule(_localctx, 28, RULE_qualifiedNameList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 185; qualifiedName();
			State = 190;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 186; Match(COMMA);
				State = 187; qualifiedName();
				}
				}
				State = 192;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParametersContext : ParserRuleContext {
		public FormalParameterListContext formalParameterList() {
			return GetRuleContext<FormalParameterListContext>(0);
		}
		public FormalParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameters; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterFormalParameters(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitFormalParameters(this);
		}
	}

	[RuleVersion(0)]
	public FormalParametersContext formalParameters() {
		FormalParametersContext _localctx = new FormalParametersContext(Context, State);
		EnterRule(_localctx, 30, RULE_formalParameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 193; Match(LPAREN);
			State = 195;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BOOLEAN) | (1L << CHAR) | (1L << Identifier))) != 0)) {
				{
				State = 194; formalParameterList();
				}
			}

			State = 197; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterListContext : ParserRuleContext {
		public FormalParameterContext[] formalParameter() {
			return GetRuleContexts<FormalParameterContext>();
		}
		public FormalParameterContext formalParameter(int i) {
			return GetRuleContext<FormalParameterContext>(i);
		}
		public LastFormalParameterContext lastFormalParameter() {
			return GetRuleContext<LastFormalParameterContext>(0);
		}
		public FormalParameterListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameterList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterFormalParameterList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitFormalParameterList(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterListContext formalParameterList() {
		FormalParameterListContext _localctx = new FormalParameterListContext(Context, State);
		EnterRule(_localctx, 32, RULE_formalParameterList);
		int _la;
		try {
			int _alt;
			State = 212;
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 199; formalParameter();
				State = 204;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 200; Match(COMMA);
						State = 201; formalParameter();
						}
						} 
					}
					State = 206;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,20,Context);
				}
				State = 209;
				_la = TokenStream.La(1);
				if (_la==COMMA) {
					{
					State = 207; Match(COMMA);
					State = 208; lastFormalParameter();
					}
				}

				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 211; lastFormalParameter();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FormalParameterContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public FormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_formalParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitFormalParameter(this);
		}
	}

	[RuleVersion(0)]
	public FormalParameterContext formalParameter() {
		FormalParameterContext _localctx = new FormalParameterContext(Context, State);
		EnterRule(_localctx, 34, RULE_formalParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 214; type();
			State = 215; variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LastFormalParameterContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public LastFormalParameterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lastFormalParameter; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterLastFormalParameter(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitLastFormalParameter(this);
		}
	}

	[RuleVersion(0)]
	public LastFormalParameterContext lastFormalParameter() {
		LastFormalParameterContext _localctx = new LastFormalParameterContext(Context, State);
		EnterRule(_localctx, 36, RULE_lastFormalParameter);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217; type();
			State = 218; Match(T__1);
			State = 219; variableDeclaratorId();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MethodBodyContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public MethodBodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_methodBody; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterMethodBody(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitMethodBody(this);
		}
	}

	[RuleVersion(0)]
	public MethodBodyContext methodBody() {
		MethodBodyContext _localctx = new MethodBodyContext(Context, State);
		EnterRule(_localctx, 38, RULE_methodBody);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 221; block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QualifiedNameContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(MyJavaParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(MyJavaParser.Identifier, i);
		}
		public QualifiedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_qualifiedName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterQualifiedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitQualifiedName(this);
		}
	}

	[RuleVersion(0)]
	public QualifiedNameContext qualifiedName() {
		QualifiedNameContext _localctx = new QualifiedNameContext(Context, State);
		EnterRule(_localctx, 40, RULE_qualifiedName);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 223; Match(Identifier);
			State = 228;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==DOT) {
				{
				{
				State = 224; Match(DOT);
				State = 225; Match(Identifier);
				}
				}
				State = 230;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		public ITerminalNode CharacterLiteral() { return GetToken(MyJavaParser.CharacterLiteral, 0); }
		public ITerminalNode BooleanLiteral() { return GetToken(MyJavaParser.BooleanLiteral, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterLiteral(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitLiteral(this);
		}
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 42, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			_la = TokenStream.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << NullLiteral))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		public BlockStatementContext[] blockStatement() {
			return GetRuleContexts<BlockStatementContext>();
		}
		public BlockStatementContext blockStatement(int i) {
			return GetRuleContext<BlockStatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 44, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 233; Match(LBRACE);
			State = 237;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << BOOLEAN) | (1L << CHAR) | (1L << CLASS) | (1L << FOR) | (1L << NEW) | (1L << PRIVATE) | (1L << PUBLIC) | (1L << STATIC) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << LBRACE) | (1L << SEMI) | (1L << BANG) | (1L << TILDE) | (1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB) | (1L << Identifier))) != 0)) {
				{
				{
				State = 234; blockStatement();
				}
				}
				State = 239;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			State = 240; Match(RBRACE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockStatementContext : ParserRuleContext {
		public LocalVariableDeclarationContext localVariableDeclaration() {
			return GetRuleContext<LocalVariableDeclarationContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public TypeDeclarationContext typeDeclaration() {
			return GetRuleContext<TypeDeclarationContext>(0);
		}
		public BlockStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_blockStatement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterBlockStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitBlockStatement(this);
		}
	}

	[RuleVersion(0)]
	public BlockStatementContext blockStatement() {
		BlockStatementContext _localctx = new BlockStatementContext(Context, State);
		EnterRule(_localctx, 46, RULE_blockStatement);
		try {
			State = 245;
			switch ( Interpreter.AdaptivePredict(TokenStream,25,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 242; localVariableDeclaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 243; statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 244; typeDeclaration();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LocalVariableDeclarationContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public VariableDeclaratorContext variableDeclarator() {
			return GetRuleContext<VariableDeclaratorContext>(0);
		}
		public LocalVariableDeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_localVariableDeclaration; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterLocalVariableDeclaration(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitLocalVariableDeclaration(this);
		}
	}

	[RuleVersion(0)]
	public LocalVariableDeclarationContext localVariableDeclaration() {
		LocalVariableDeclarationContext _localctx = new LocalVariableDeclarationContext(Context, State);
		EnterRule(_localctx, 48, RULE_localVariableDeclaration);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 247; type();
			State = 248; variableDeclarator();
			State = 249; Match(SEMI);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public EnhancedForControlContext enhancedForControl() {
			return GetRuleContext<EnhancedForControlContext>(0);
		}
		public StatementContext statement() {
			return GetRuleContext<StatementContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 50, RULE_statement);
		try {
			State = 262;
			switch (TokenStream.La(1)) {
			case LBRACE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 251; block();
				}
				break;
			case FOR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 252; Match(FOR);
				State = 253; Match(LPAREN);
				State = 254; enhancedForControl();
				State = 255; Match(RPAREN);
				State = 256; statement();
				}
				break;
			case SEMI:
				EnterOuterAlt(_localctx, 3);
				{
				State = 258; Match(SEMI);
				}
				break;
			case T__2:
			case NEW:
			case BooleanLiteral:
			case CharacterLiteral:
			case NullLiteral:
			case LPAREN:
			case BANG:
			case TILDE:
			case INC:
			case DEC:
			case ADD:
			case SUB:
			case Identifier:
				EnterOuterAlt(_localctx, 4);
				{
				State = 259; expression(0);
				State = 260; Match(SEMI);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EnhancedForControlContext : ParserRuleContext {
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public VariableDeclaratorIdContext variableDeclaratorId() {
			return GetRuleContext<VariableDeclaratorIdContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EnhancedForControlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_enhancedForControl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterEnhancedForControl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitEnhancedForControl(this);
		}
	}

	[RuleVersion(0)]
	public EnhancedForControlContext enhancedForControl() {
		EnhancedForControlContext _localctx = new EnhancedForControlContext(Context, State);
		EnterRule(_localctx, 52, RULE_enhancedForControl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 264; type();
			State = 265; variableDeclaratorId();
			State = 266; Match(COLON);
			State = 267; expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionListContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionListContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expressionList; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterExpressionList(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitExpressionList(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionListContext expressionList() {
		ExpressionListContext _localctx = new ExpressionListContext(Context, State);
		EnterRule(_localctx, 54, RULE_expressionList);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 269; expression(0);
			State = 274;
			ErrorHandler.Sync(this);
			_la = TokenStream.La(1);
			while (_la==COMMA) {
				{
				{
				State = 270; Match(COMMA);
				State = 271; expression(0);
				}
				}
				State = 276;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public PrimaryContext primary() {
			return GetRuleContext<PrimaryContext>(0);
		}
		public CreatorContext creator() {
			return GetRuleContext<CreatorContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(MyJavaParser.Identifier, 0); }
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 56;
		EnterRecursionRule(_localctx, 56, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 285;
			switch (TokenStream.La(1)) {
			case INC:
			case DEC:
			case ADD:
			case SUB:
				{
				State = 278;
				_la = TokenStream.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB))) != 0)) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 279; expression(13);
				}
				break;
			case BANG:
			case TILDE:
				{
				State = 280;
				_la = TokenStream.La(1);
				if ( !(_la==BANG || _la==TILDE) ) {
				ErrorHandler.RecoverInline(this);
				}
				else {
				    Consume();
				}
				State = 281; expression(12);
				}
				break;
			case T__2:
			case BooleanLiteral:
			case CharacterLiteral:
			case NullLiteral:
			case LPAREN:
			case Identifier:
				{
				State = 282; primary();
				}
				break;
			case NEW:
				{
				State = 283; Match(NEW);
				State = 284; creator();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.Lt(-1);
			State = 344;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 342;
					switch ( Interpreter.AdaptivePredict(TokenStream,30,Context) ) {
					case 1:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 287;
						if (!(Precpred(Context, 11))) throw new FailedPredicateException(this, "Precpred(Context, 11)");
						State = 288;
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MOD))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 289; expression(12);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 290;
						if (!(Precpred(Context, 10))) throw new FailedPredicateException(this, "Precpred(Context, 10)");
						State = 291;
						_la = TokenStream.La(1);
						if ( !(_la==ADD || _la==SUB) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 292; expression(11);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 293;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 294;
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << GT) | (1L << LT) | (1L << LE) | (1L << GE))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 295; expression(10);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 296;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 297;
						_la = TokenStream.La(1);
						if ( !(_la==EQUAL || _la==NOTEQUAL) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 298; expression(9);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 299;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 300; Match(BITAND);
						State = 301; expression(8);
						}
						break;
					case 6:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 302;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 303; Match(CARET);
						State = 304; expression(7);
						}
						break;
					case 7:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 305;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 306; Match(BITOR);
						State = 307; expression(6);
						}
						break;
					case 8:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 308;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 309; Match(AND);
						State = 310; expression(5);
						}
						break;
					case 9:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 311;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 312; Match(OR);
						State = 313; expression(4);
						}
						break;
					case 10:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 314;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 315; Match(QUESTION);
						State = 316; expression(0);
						State = 317; Match(COLON);
						State = 318; expression(3);
						}
						break;
					case 11:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 320;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 321;
						_la = TokenStream.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << T__7) | (1L << T__8) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << ASSIGN))) != 0)) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						State = 322; expression(1);
						}
						break;
					case 12:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 323;
						if (!(Precpred(Context, 19))) throw new FailedPredicateException(this, "Precpred(Context, 19)");
						State = 324; Match(DOT);
						State = 325; Match(Identifier);
						}
						break;
					case 13:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 326;
						if (!(Precpred(Context, 18))) throw new FailedPredicateException(this, "Precpred(Context, 18)");
						State = 327; Match(DOT);
						State = 328; Match(T__2);
						}
						break;
					case 14:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 329;
						if (!(Precpred(Context, 17))) throw new FailedPredicateException(this, "Precpred(Context, 17)");
						State = 330; Match(LBRACK);
						State = 331; expression(0);
						State = 332; Match(RBRACK);
						}
						break;
					case 15:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 334;
						if (!(Precpred(Context, 16))) throw new FailedPredicateException(this, "Precpred(Context, 16)");
						State = 335; Match(LPAREN);
						State = 337;
						_la = TokenStream.La(1);
						if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << NEW) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << BANG) | (1L << TILDE) | (1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB) | (1L << Identifier))) != 0)) {
							{
							State = 336; expressionList();
							}
						}

						State = 339; Match(RPAREN);
						}
						break;
					case 16:
						{
						_localctx = new ExpressionContext(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 340;
						if (!(Precpred(Context, 14))) throw new FailedPredicateException(this, "Precpred(Context, 14)");
						State = 341;
						_la = TokenStream.La(1);
						if ( !(_la==INC || _la==DEC) ) {
						ErrorHandler.RecoverInline(this);
						}
						else {
						    Consume();
						}
						}
						break;
					}
					} 
				}
				State = 346;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,31,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PrimaryContext : ParserRuleContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public ITerminalNode Identifier() { return GetToken(MyJavaParser.Identifier, 0); }
		public PrimaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterPrimary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitPrimary(this);
		}
	}

	[RuleVersion(0)]
	public PrimaryContext primary() {
		PrimaryContext _localctx = new PrimaryContext(Context, State);
		EnterRule(_localctx, 58, RULE_primary);
		try {
			State = 354;
			switch (TokenStream.La(1)) {
			case LPAREN:
				EnterOuterAlt(_localctx, 1);
				{
				State = 347; Match(LPAREN);
				State = 348; expression(0);
				State = 349; Match(RPAREN);
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 351; Match(T__2);
				}
				break;
			case BooleanLiteral:
			case CharacterLiteral:
			case NullLiteral:
				EnterOuterAlt(_localctx, 3);
				{
				State = 352; literal();
				}
				break;
			case Identifier:
				EnterOuterAlt(_localctx, 4);
				{
				State = 353; Match(Identifier);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatorContext : ParserRuleContext {
		public CreatedNameContext createdName() {
			return GetRuleContext<CreatedNameContext>(0);
		}
		public ClassCreatorRestContext classCreatorRest() {
			return GetRuleContext<ClassCreatorRestContext>(0);
		}
		public CreatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_creator; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterCreator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitCreator(this);
		}
	}

	[RuleVersion(0)]
	public CreatorContext creator() {
		CreatorContext _localctx = new CreatorContext(Context, State);
		EnterRule(_localctx, 60, RULE_creator);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 356; createdName();
			{
			State = 357; classCreatorRest();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreatedNameContext : ParserRuleContext {
		public ITerminalNode[] Identifier() { return GetTokens(MyJavaParser.Identifier); }
		public ITerminalNode Identifier(int i) {
			return GetToken(MyJavaParser.Identifier, i);
		}
		public PrimitiveTypeContext primitiveType() {
			return GetRuleContext<PrimitiveTypeContext>(0);
		}
		public CreatedNameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_createdName; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterCreatedName(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitCreatedName(this);
		}
	}

	[RuleVersion(0)]
	public CreatedNameContext createdName() {
		CreatedNameContext _localctx = new CreatedNameContext(Context, State);
		EnterRule(_localctx, 62, RULE_createdName);
		int _la;
		try {
			State = 368;
			switch (TokenStream.La(1)) {
			case Identifier:
				EnterOuterAlt(_localctx, 1);
				{
				State = 359; Match(Identifier);
				State = 364;
				ErrorHandler.Sync(this);
				_la = TokenStream.La(1);
				while (_la==DOT) {
					{
					{
					State = 360; Match(DOT);
					State = 361; Match(Identifier);
					}
					}
					State = 366;
					ErrorHandler.Sync(this);
					_la = TokenStream.La(1);
				}
				}
				break;
			case BOOLEAN:
			case CHAR:
				EnterOuterAlt(_localctx, 2);
				{
				State = 367; primitiveType();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ClassCreatorRestContext : ParserRuleContext {
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ClassBodyContext classBody() {
			return GetRuleContext<ClassBodyContext>(0);
		}
		public ClassCreatorRestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_classCreatorRest; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterClassCreatorRest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitClassCreatorRest(this);
		}
	}

	[RuleVersion(0)]
	public ClassCreatorRestContext classCreatorRest() {
		ClassCreatorRestContext _localctx = new ClassCreatorRestContext(Context, State);
		EnterRule(_localctx, 64, RULE_classCreatorRest);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 370; arguments();
			State = 372;
			switch ( Interpreter.AdaptivePredict(TokenStream,35,Context) ) {
			case 1:
				{
				State = 371; classBody();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ExpressionListContext expressionList() {
			return GetRuleContext<ExpressionListContext>(0);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.EnterArguments(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMyJavaListener typedListener = listener as IMyJavaListener;
			if (typedListener != null) typedListener.ExitArguments(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 66, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374; Match(LPAREN);
			State = 376;
			_la = TokenStream.La(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << NEW) | (1L << BooleanLiteral) | (1L << CharacterLiteral) | (1L << NullLiteral) | (1L << LPAREN) | (1L << BANG) | (1L << TILDE) | (1L << INC) | (1L << DEC) | (1L << ADD) | (1L << SUB) | (1L << Identifier))) != 0)) {
				{
				State = 375; expressionList();
				}
			}

			State = 378; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 28: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 11);
		case 1: return Precpred(Context, 10);
		case 2: return Precpred(Context, 9);
		case 3: return Precpred(Context, 8);
		case 4: return Precpred(Context, 7);
		case 5: return Precpred(Context, 6);
		case 6: return Precpred(Context, 5);
		case 7: return Precpred(Context, 4);
		case 8: return Precpred(Context, 3);
		case 9: return Precpred(Context, 2);
		case 10: return Precpred(Context, 1);
		case 11: return Precpred(Context, 19);
		case 12: return Precpred(Context, 18);
		case 13: return Precpred(Context, 17);
		case 14: return Precpred(Context, 16);
		case 15: return Precpred(Context, 14);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\x430\xD6D1\x8206\xAD2D\x4417\xAEF1\x8D80\xAADD\x3@\x17F\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x4\x12\t\x12\x4\x13\t\x13\x4\x14\t\x14\x4\x15\t\x15"+
		"\x4\x16\t\x16\x4\x17\t\x17\x4\x18\t\x18\x4\x19\t\x19\x4\x1A\t\x1A\x4\x1B"+
		"\t\x1B\x4\x1C\t\x1C\x4\x1D\t\x1D\x4\x1E\t\x1E\x4\x1F\t\x1F\x4 \t \x4!"+
		"\t!\x4\"\t\"\x4#\t#\x3\x2\a\x2H\n\x2\f\x2\xE\x2K\v\x2\x3\x2\x3\x2\x3\x3"+
		"\a\x3P\n\x3\f\x3\xE\x3S\v\x3\x3\x3\x3\x3\x5\x3W\n\x3\x3\x4\x6\x4Z\n\x4"+
		"\r\x4\xE\x4[\x3\x5\x3\x5\x3\x5\x3\x5\x3\x6\x3\x6\a\x6\x64\n\x6\f\x6\xE"+
		"\x6g\v\x6\x3\x6\x3\x6\x3\a\x3\a\a\am\n\a\f\a\xE\ap\v\a\x3\a\x5\as\n\a"+
		"\x3\b\x3\b\x3\b\x5\bx\n\b\x3\t\x3\t\x5\t|\n\t\x3\t\x3\t\x3\t\x3\t\a\t"+
		"\x82\n\t\f\t\xE\t\x85\v\t\x3\t\x3\t\x5\t\x89\n\t\x3\t\x3\t\x5\t\x8D\n"+
		"\t\x3\n\x3\n\x3\n\x3\n\x3\v\x3\v\x3\v\x5\v\x96\n\v\x3\f\x3\f\x3\f\a\f"+
		"\x9B\n\f\f\f\xE\f\x9E\v\f\x3\r\x3\r\x3\r\a\r\xA3\n\r\f\r\xE\r\xA6\v\r"+
		"\x3\r\x3\r\x3\r\a\r\xAB\n\r\f\r\xE\r\xAE\v\r\x5\r\xB0\n\r\x3\xE\x3\xE"+
		"\x3\xE\a\xE\xB5\n\xE\f\xE\xE\xE\xB8\v\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3"+
		"\x10\a\x10\xBF\n\x10\f\x10\xE\x10\xC2\v\x10\x3\x11\x3\x11\x5\x11\xC6\n"+
		"\x11\x3\x11\x3\x11\x3\x12\x3\x12\x3\x12\a\x12\xCD\n\x12\f\x12\xE\x12\xD0"+
		"\v\x12\x3\x12\x3\x12\x5\x12\xD4\n\x12\x3\x12\x5\x12\xD7\n\x12\x3\x13\x3"+
		"\x13\x3\x13\x3\x14\x3\x14\x3\x14\x3\x14\x3\x15\x3\x15\x3\x16\x3\x16\x3"+
		"\x16\a\x16\xE5\n\x16\f\x16\xE\x16\xE8\v\x16\x3\x17\x3\x17\x3\x18\x3\x18"+
		"\a\x18\xEE\n\x18\f\x18\xE\x18\xF1\v\x18\x3\x18\x3\x18\x3\x19\x3\x19\x3"+
		"\x19\x5\x19\xF8\n\x19\x3\x1A\x3\x1A\x3\x1A\x3\x1A\x3\x1B\x3\x1B\x3\x1B"+
		"\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x3\x1B\x5\x1B\x109\n"+
		"\x1B\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1C\x3\x1D\x3\x1D\x3\x1D\a\x1D\x113"+
		"\n\x1D\f\x1D\xE\x1D\x116\v\x1D\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\x3\x1E\x3\x1E\x5\x1E\x120\n\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x3"+
		"\x1E\x3\x1E\x3\x1E\x3\x1E\x3\x1E\x5\x1E\x154\n\x1E\x3\x1E\x3\x1E\x3\x1E"+
		"\a\x1E\x159\n\x1E\f\x1E\xE\x1E\x15C\v\x1E\x3\x1F\x3\x1F\x3\x1F\x3\x1F"+
		"\x3\x1F\x3\x1F\x3\x1F\x5\x1F\x165\n\x1F\x3 \x3 \x3 \x3!\x3!\x3!\a!\x16D"+
		"\n!\f!\xE!\x170\v!\x3!\x5!\x173\n!\x3\"\x3\"\x5\"\x177\n\"\x3#\x3#\x5"+
		"#\x17B\n#\x3#\x3#\x3#\x2\x3:$\x2\x4\x6\b\n\f\xE\x10\x12\x14\x16\x18\x1A"+
		"\x1C\x1E \"$&(*,.\x30\x32\x34\x36\x38:<>@\x42\x44\x2\r\x3\x2\x16\x18\x3"+
		"\x2\x11\x12\x3\x2\x1A\x1C\x3\x2\x33\x36\x3\x2)*\x4\x2\x37\x38<<\x3\x2"+
		"\x35\x36\x4\x2\'(./\x4\x2--\x30\x30\x4\x2\x6\x10&&\x3\x2\x33\x34\x197"+
		"\x2I\x3\x2\x2\x2\x4V\x3\x2\x2\x2\x6Y\x3\x2\x2\x2\b]\x3\x2\x2\x2\n\x61"+
		"\x3\x2\x2\x2\fr\x3\x2\x2\x2\xEw\x3\x2\x2\x2\x10{\x3\x2\x2\x2\x12\x8E\x3"+
		"\x2\x2\x2\x14\x92\x3\x2\x2\x2\x16\x97\x3\x2\x2\x2\x18\xAF\x3\x2\x2\x2"+
		"\x1A\xB1\x3\x2\x2\x2\x1C\xB9\x3\x2\x2\x2\x1E\xBB\x3\x2\x2\x2 \xC3\x3\x2"+
		"\x2\x2\"\xD6\x3\x2\x2\x2$\xD8\x3\x2\x2\x2&\xDB\x3\x2\x2\x2(\xDF\x3\x2"+
		"\x2\x2*\xE1\x3\x2\x2\x2,\xE9\x3\x2\x2\x2.\xEB\x3\x2\x2\x2\x30\xF7\x3\x2"+
		"\x2\x2\x32\xF9\x3\x2\x2\x2\x34\x108\x3\x2\x2\x2\x36\x10A\x3\x2\x2\x2\x38"+
		"\x10F\x3\x2\x2\x2:\x11F\x3\x2\x2\x2<\x164\x3\x2\x2\x2>\x166\x3\x2\x2\x2"+
		"@\x172\x3\x2\x2\x2\x42\x174\x3\x2\x2\x2\x44\x178\x3\x2\x2\x2\x46H\x5\x4"+
		"\x3\x2G\x46\x3\x2\x2\x2HK\x3\x2\x2\x2IG\x3\x2\x2\x2IJ\x3\x2\x2\x2JL\x3"+
		"\x2\x2\x2KI\x3\x2\x2\x2LM\a\x2\x2\x3M\x3\x3\x2\x2\x2NP\x5\x6\x4\x2ON\x3"+
		"\x2\x2\x2PS\x3\x2\x2\x2QO\x3\x2\x2\x2QR\x3\x2\x2\x2RT\x3\x2\x2\x2SQ\x3"+
		"\x2\x2\x2TW\x5\b\x5\x2UW\a#\x2\x2VQ\x3\x2\x2\x2VU\x3\x2\x2\x2W\x5\x3\x2"+
		"\x2\x2XZ\t\x2\x2\x2YX\x3\x2\x2\x2Z[\x3\x2\x2\x2[Y\x3\x2\x2\x2[\\\x3\x2"+
		"\x2\x2\\\a\x3\x2\x2\x2]^\a\x13\x2\x2^_\a=\x2\x2_`\x5\n\x6\x2`\t\x3\x2"+
		"\x2\x2\x61\x65\a\x1F\x2\x2\x62\x64\x5\f\a\x2\x63\x62\x3\x2\x2\x2\x64g"+
		"\x3\x2\x2\x2\x65\x63\x3\x2\x2\x2\x65\x66\x3\x2\x2\x2\x66h\x3\x2\x2\x2"+
		"g\x65\x3\x2\x2\x2hi\a \x2\x2i\v\x3\x2\x2\x2js\a#\x2\x2km\x5\x6\x4\x2l"+
		"k\x3\x2\x2\x2mp\x3\x2\x2\x2nl\x3\x2\x2\x2no\x3\x2\x2\x2oq\x3\x2\x2\x2"+
		"pn\x3\x2\x2\x2qs\x5\xE\b\x2rj\x3\x2\x2\x2rn\x3\x2\x2\x2s\r\x3\x2\x2\x2"+
		"tx\x5\x10\t\x2ux\x5\x12\n\x2vx\x5\b\x5\x2wt\x3\x2\x2\x2wu\x3\x2\x2\x2"+
		"wv\x3\x2\x2\x2x\xF\x3\x2\x2\x2y|\x5\x18\r\x2z|\a\x19\x2\x2{y\x3\x2\x2"+
		"\x2{z\x3\x2\x2\x2|}\x3\x2\x2\x2}~\a=\x2\x2~\x83\x5 \x11\x2\x7F\x80\a!"+
		"\x2\x2\x80\x82\a\"\x2\x2\x81\x7F\x3\x2\x2\x2\x82\x85\x3\x2\x2\x2\x83\x81"+
		"\x3\x2\x2\x2\x83\x84\x3\x2\x2\x2\x84\x88\x3\x2\x2\x2\x85\x83\x3\x2\x2"+
		"\x2\x86\x87\a\x3\x2\x2\x87\x89\x5\x1E\x10\x2\x88\x86\x3\x2\x2\x2\x88\x89"+
		"\x3\x2\x2\x2\x89\x8C\x3\x2\x2\x2\x8A\x8D\x5(\x15\x2\x8B\x8D\a#\x2\x2\x8C"+
		"\x8A\x3\x2\x2\x2\x8C\x8B\x3\x2\x2\x2\x8D\x11\x3\x2\x2\x2\x8E\x8F\x5\x18"+
		"\r\x2\x8F\x90\x5\x14\v\x2\x90\x91\a#\x2\x2\x91\x13\x3\x2\x2\x2\x92\x95"+
		"\x5\x16\f\x2\x93\x94\a&\x2\x2\x94\x96\x5:\x1E\x2\x95\x93\x3\x2\x2\x2\x95"+
		"\x96\x3\x2\x2\x2\x96\x15\x3\x2\x2\x2\x97\x9C\a=\x2\x2\x98\x99\a!\x2\x2"+
		"\x99\x9B\a\"\x2\x2\x9A\x98\x3\x2\x2\x2\x9B\x9E\x3\x2\x2\x2\x9C\x9A\x3"+
		"\x2\x2\x2\x9C\x9D\x3\x2\x2\x2\x9D\x17\x3\x2\x2\x2\x9E\x9C\x3\x2\x2\x2"+
		"\x9F\xA4\x5\x1A\xE\x2\xA0\xA1\a!\x2\x2\xA1\xA3\a\"\x2\x2\xA2\xA0\x3\x2"+
		"\x2\x2\xA3\xA6\x3\x2\x2\x2\xA4\xA2\x3\x2\x2\x2\xA4\xA5\x3\x2\x2\x2\xA5"+
		"\xB0\x3\x2\x2\x2\xA6\xA4\x3\x2\x2\x2\xA7\xAC\x5\x1C\xF\x2\xA8\xA9\a!\x2"+
		"\x2\xA9\xAB\a\"\x2\x2\xAA\xA8\x3\x2\x2\x2\xAB\xAE\x3\x2\x2\x2\xAC\xAA"+
		"\x3\x2\x2\x2\xAC\xAD\x3\x2\x2\x2\xAD\xB0\x3\x2\x2\x2\xAE\xAC\x3\x2\x2"+
		"\x2\xAF\x9F\x3\x2\x2\x2\xAF\xA7\x3\x2\x2\x2\xB0\x19\x3\x2\x2\x2\xB1\xB6"+
		"\a=\x2\x2\xB2\xB3\a%\x2\x2\xB3\xB5\a=\x2\x2\xB4\xB2\x3\x2\x2\x2\xB5\xB8"+
		"\x3\x2\x2\x2\xB6\xB4\x3\x2\x2\x2\xB6\xB7\x3\x2\x2\x2\xB7\x1B\x3\x2\x2"+
		"\x2\xB8\xB6\x3\x2\x2\x2\xB9\xBA\t\x3\x2\x2\xBA\x1D\x3\x2\x2\x2\xBB\xC0"+
		"\x5*\x16\x2\xBC\xBD\a$\x2\x2\xBD\xBF\x5*\x16\x2\xBE\xBC\x3\x2\x2\x2\xBF"+
		"\xC2\x3\x2\x2\x2\xC0\xBE\x3\x2\x2\x2\xC0\xC1\x3\x2\x2\x2\xC1\x1F\x3\x2"+
		"\x2\x2\xC2\xC0\x3\x2\x2\x2\xC3\xC5\a\x1D\x2\x2\xC4\xC6\x5\"\x12\x2\xC5"+
		"\xC4\x3\x2\x2\x2\xC5\xC6\x3\x2\x2\x2\xC6\xC7\x3\x2\x2\x2\xC7\xC8\a\x1E"+
		"\x2\x2\xC8!\x3\x2\x2\x2\xC9\xCE\x5$\x13\x2\xCA\xCB\a$\x2\x2\xCB\xCD\x5"+
		"$\x13\x2\xCC\xCA\x3\x2\x2\x2\xCD\xD0\x3\x2\x2\x2\xCE\xCC\x3\x2\x2\x2\xCE"+
		"\xCF\x3\x2\x2\x2\xCF\xD3\x3\x2\x2\x2\xD0\xCE\x3\x2\x2\x2\xD1\xD2\a$\x2"+
		"\x2\xD2\xD4\x5&\x14\x2\xD3\xD1\x3\x2\x2\x2\xD3\xD4\x3\x2\x2\x2\xD4\xD7"+
		"\x3\x2\x2\x2\xD5\xD7\x5&\x14\x2\xD6\xC9\x3\x2\x2\x2\xD6\xD5\x3\x2\x2\x2"+
		"\xD7#\x3\x2\x2\x2\xD8\xD9\x5\x18\r\x2\xD9\xDA\x5\x16\f\x2\xDA%\x3\x2\x2"+
		"\x2\xDB\xDC\x5\x18\r\x2\xDC\xDD\a\x4\x2\x2\xDD\xDE\x5\x16\f\x2\xDE\'\x3"+
		"\x2\x2\x2\xDF\xE0\x5.\x18\x2\xE0)\x3\x2\x2\x2\xE1\xE6\a=\x2\x2\xE2\xE3"+
		"\a%\x2\x2\xE3\xE5\a=\x2\x2\xE4\xE2\x3\x2\x2\x2\xE5\xE8\x3\x2\x2\x2\xE6"+
		"\xE4\x3\x2\x2\x2\xE6\xE7\x3\x2\x2\x2\xE7+\x3\x2\x2\x2\xE8\xE6\x3\x2\x2"+
		"\x2\xE9\xEA\t\x4\x2\x2\xEA-\x3\x2\x2\x2\xEB\xEF\a\x1F\x2\x2\xEC\xEE\x5"+
		"\x30\x19\x2\xED\xEC\x3\x2\x2\x2\xEE\xF1\x3\x2\x2\x2\xEF\xED\x3\x2\x2\x2"+
		"\xEF\xF0\x3\x2\x2\x2\xF0\xF2\x3\x2\x2\x2\xF1\xEF\x3\x2\x2\x2\xF2\xF3\a"+
		" \x2\x2\xF3/\x3\x2\x2\x2\xF4\xF8\x5\x32\x1A\x2\xF5\xF8\x5\x34\x1B\x2\xF6"+
		"\xF8\x5\x4\x3\x2\xF7\xF4\x3\x2\x2\x2\xF7\xF5\x3\x2\x2\x2\xF7\xF6\x3\x2"+
		"\x2\x2\xF8\x31\x3\x2\x2\x2\xF9\xFA\x5\x18\r\x2\xFA\xFB\x5\x14\v\x2\xFB"+
		"\xFC\a#\x2\x2\xFC\x33\x3\x2\x2\x2\xFD\x109\x5.\x18\x2\xFE\xFF\a\x14\x2"+
		"\x2\xFF\x100\a\x1D\x2\x2\x100\x101\x5\x36\x1C\x2\x101\x102\a\x1E\x2\x2"+
		"\x102\x103\x5\x34\x1B\x2\x103\x109\x3\x2\x2\x2\x104\x109\a#\x2\x2\x105"+
		"\x106\x5:\x1E\x2\x106\x107\a#\x2\x2\x107\x109\x3\x2\x2\x2\x108\xFD\x3"+
		"\x2\x2\x2\x108\xFE\x3\x2\x2\x2\x108\x104\x3\x2\x2\x2\x108\x105\x3\x2\x2"+
		"\x2\x109\x35\x3\x2\x2\x2\x10A\x10B\x5\x18\r\x2\x10B\x10C\x5\x16\f\x2\x10C"+
		"\x10D\a,\x2\x2\x10D\x10E\x5:\x1E\x2\x10E\x37\x3\x2\x2\x2\x10F\x114\x5"+
		":\x1E\x2\x110\x111\a$\x2\x2\x111\x113\x5:\x1E\x2\x112\x110\x3\x2\x2\x2"+
		"\x113\x116\x3\x2\x2\x2\x114\x112\x3\x2\x2\x2\x114\x115\x3\x2\x2\x2\x115"+
		"\x39\x3\x2\x2\x2\x116\x114\x3\x2\x2\x2\x117\x118\b\x1E\x1\x2\x118\x119"+
		"\t\x5\x2\x2\x119\x120\x5:\x1E\xF\x11A\x11B\t\x6\x2\x2\x11B\x120\x5:\x1E"+
		"\xE\x11C\x120\x5<\x1F\x2\x11D\x11E\a\x15\x2\x2\x11E\x120\x5> \x2\x11F"+
		"\x117\x3\x2\x2\x2\x11F\x11A\x3\x2\x2\x2\x11F\x11C\x3\x2\x2\x2\x11F\x11D"+
		"\x3\x2\x2\x2\x120\x15A\x3\x2\x2\x2\x121\x122\f\r\x2\x2\x122\x123\t\a\x2"+
		"\x2\x123\x159\x5:\x1E\xE\x124\x125\f\f\x2\x2\x125\x126\t\b\x2\x2\x126"+
		"\x159\x5:\x1E\r\x127\x128\f\v\x2\x2\x128\x129\t\t\x2\x2\x129\x159\x5:"+
		"\x1E\f\x12A\x12B\f\n\x2\x2\x12B\x12C\t\n\x2\x2\x12C\x159\x5:\x1E\v\x12D"+
		"\x12E\f\t\x2\x2\x12E\x12F\a\x39\x2\x2\x12F\x159\x5:\x1E\n\x130\x131\f"+
		"\b\x2\x2\x131\x132\a;\x2\x2\x132\x159\x5:\x1E\t\x133\x134\f\a\x2\x2\x134"+
		"\x135\a:\x2\x2\x135\x159\x5:\x1E\b\x136\x137\f\x6\x2\x2\x137\x138\a\x31"+
		"\x2\x2\x138\x159\x5:\x1E\a\x139\x13A\f\x5\x2\x2\x13A\x13B\a\x32\x2\x2"+
		"\x13B\x159\x5:\x1E\x6\x13C\x13D\f\x4\x2\x2\x13D\x13E\a+\x2\x2\x13E\x13F"+
		"\x5:\x1E\x2\x13F\x140\a,\x2\x2\x140\x141\x5:\x1E\x5\x141\x159\x3\x2\x2"+
		"\x2\x142\x143\f\x3\x2\x2\x143\x144\t\v\x2\x2\x144\x159\x5:\x1E\x3\x145"+
		"\x146\f\x15\x2\x2\x146\x147\a%\x2\x2\x147\x159\a=\x2\x2\x148\x149\f\x14"+
		"\x2\x2\x149\x14A\a%\x2\x2\x14A\x159\a\x5\x2\x2\x14B\x14C\f\x13\x2\x2\x14C"+
		"\x14D\a!\x2\x2\x14D\x14E\x5:\x1E\x2\x14E\x14F\a\"\x2\x2\x14F\x159\x3\x2"+
		"\x2\x2\x150\x151\f\x12\x2\x2\x151\x153\a\x1D\x2\x2\x152\x154\x5\x38\x1D"+
		"\x2\x153\x152\x3\x2\x2\x2\x153\x154\x3\x2\x2\x2\x154\x155\x3\x2\x2\x2"+
		"\x155\x159\a\x1E\x2\x2\x156\x157\f\x10\x2\x2\x157\x159\t\f\x2\x2\x158"+
		"\x121\x3\x2\x2\x2\x158\x124\x3\x2\x2\x2\x158\x127\x3\x2\x2\x2\x158\x12A"+
		"\x3\x2\x2\x2\x158\x12D\x3\x2\x2\x2\x158\x130\x3\x2\x2\x2\x158\x133\x3"+
		"\x2\x2\x2\x158\x136\x3\x2\x2\x2\x158\x139\x3\x2\x2\x2\x158\x13C\x3\x2"+
		"\x2\x2\x158\x142\x3\x2\x2\x2\x158\x145\x3\x2\x2\x2\x158\x148\x3\x2\x2"+
		"\x2\x158\x14B\x3\x2\x2\x2\x158\x150\x3\x2\x2\x2\x158\x156\x3\x2\x2\x2"+
		"\x159\x15C\x3\x2\x2\x2\x15A\x158\x3\x2\x2\x2\x15A\x15B\x3\x2\x2\x2\x15B"+
		";\x3\x2\x2\x2\x15C\x15A\x3\x2\x2\x2\x15D\x15E\a\x1D\x2\x2\x15E\x15F\x5"+
		":\x1E\x2\x15F\x160\a\x1E\x2\x2\x160\x165\x3\x2\x2\x2\x161\x165\a\x5\x2"+
		"\x2\x162\x165\x5,\x17\x2\x163\x165\a=\x2\x2\x164\x15D\x3\x2\x2\x2\x164"+
		"\x161\x3\x2\x2\x2\x164\x162\x3\x2\x2\x2\x164\x163\x3\x2\x2\x2\x165=\x3"+
		"\x2\x2\x2\x166\x167\x5@!\x2\x167\x168\x5\x42\"\x2\x168?\x3\x2\x2\x2\x169"+
		"\x16E\a=\x2\x2\x16A\x16B\a%\x2\x2\x16B\x16D\a=\x2\x2\x16C\x16A\x3\x2\x2"+
		"\x2\x16D\x170\x3\x2\x2\x2\x16E\x16C\x3\x2\x2\x2\x16E\x16F\x3\x2\x2\x2"+
		"\x16F\x173\x3\x2\x2\x2\x170\x16E\x3\x2\x2\x2\x171\x173\x5\x1C\xF\x2\x172"+
		"\x169\x3\x2\x2\x2\x172\x171\x3\x2\x2\x2\x173\x41\x3\x2\x2\x2\x174\x176"+
		"\x5\x44#\x2\x175\x177\x5\n\x6\x2\x176\x175\x3\x2\x2\x2\x176\x177\x3\x2"+
		"\x2\x2\x177\x43\x3\x2\x2\x2\x178\x17A\a\x1D\x2\x2\x179\x17B\x5\x38\x1D"+
		"\x2\x17A\x179\x3\x2\x2\x2\x17A\x17B\x3\x2\x2\x2\x17B\x17C\x3\x2\x2\x2"+
		"\x17C\x17D\a\x1E\x2\x2\x17D\x45\x3\x2\x2\x2\'IQV[\x65nrw{\x83\x88\x8C"+
		"\x95\x9C\xA4\xAC\xAF\xB6\xC0\xC5\xCE\xD3\xD6\xE6\xEF\xF7\x108\x114\x11F"+
		"\x153\x158\x15A\x164\x16E\x172\x176\x17A";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
